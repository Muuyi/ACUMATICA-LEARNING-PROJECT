<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>NodaTime</name>
  </assembly>
  <members>
    <member name="T:NodaTime.AmbiguousTimeException">
      <summary>
            Exception thrown to indicate that the specified local date/time occurs twice
            in a particular time zone due to daylight saving time changes.
            </summary>
    </member>
    <member name="M:NodaTime.AmbiguousTimeException.#ctor(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Constructs an instance from the given information.
            </summary>
      <param name="earlierMapping">The earlier possible mapping</param>
      <param name="laterMapping">The later possible mapping</param>
    </member>
    <member name="P:NodaTime.AmbiguousTimeException.EarlierMapping">
      <summary>
            The earlier of the two occurrences of the local date and time within the time zone.
            </summary>
    </member>
    <member name="P:NodaTime.AmbiguousTimeException.LaterMapping">
      <summary>
            The later of the two occurrences of the local date and time within the time zone.
            </summary>
    </member>
    <member name="P:NodaTime.AmbiguousTimeException.Zone">
      <summary>
            The time zone in which the local date and time is ambiguous.
            </summary>
    </member>
    <member name="T:NodaTime.CalendarSystem">
      <summary>
            A calendar system maps the non-calendar-specific "local time line" to human concepts
            such as years, months and days.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.Eras">
      <summary>
            Returns a read-only list of eras used in this calendar system.
            </summary>
    </member>
    <member name="M:NodaTime.CalendarSystem.ForId(System.String)">
      <summary>
            Fetches a calendar system by its unique identifier. This provides full round-tripping of a calendar
            system. It is not guaranteed that calling this method twice with the same identifier will return
            identical references, but the references objects will be equal.
            </summary>
      <param name="id">The ID of the calendar system. This is case-sensitive.</param>
      <returns>The calendar system with the given ID.</returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">No calendar system for the specified ID can be found.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetAbsoluteYear(System.Int32,NodaTime.Calendars.Era)">
      <summary>
            Returns the "absolute year" (the one used throughout most of the API, without respect to eras)
            from a year-of-era and an era.
            </summary>
      <param name="yearOfEra">The year within the era.</param>
      <param name="era">The era in which to consider the year</param>
      <returns>The absolute year represented by the specified year of era.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="yearOfEra" /> is out of the range of years for the given era.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is not an era used in this calendar.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="era" /> is null.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetCopticCalendar(System.Int32)">
      <summary>
            Returns a Coptic calendar system, which defines every fourth year as
            leap, much like the Julian calendar. The year is broken down into 12 months,
            each 30 days in length. An extra period at the end of the year is either 5
            or 6 days in length. In this implementation, it is considered a 13th month.
            </summary>
      <param name="minDaysInFirstWeek">The minimum number of days in the first week of the year.
            When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is
            used to decide at what point the week year changes.</param>
      <returns>A suitable Coptic calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
            Returns the number of days in the given month within the given year.
            </summary>
      <param name="year">The year in which to consider the month</param>
      <param name="month">The month to determine the number of days in</param>
      <returns>The number of days in the given month and year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given year / month combination
            is invalid for this calendar.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetGregorianCalendar(System.Int32)">
      <summary>
            Returns a pure proleptic Gregorian calendar system, which defines every
            fourth year as leap, unless the year is divisible by 100 and not by 400.
            This improves upon the Julian calendar leap year rule.
            </summary>
      <param name="minDaysInFirstWeek">The minimum number of days in the first week of the year.
            When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is
            used to decide at what point the week year changes.</param>
      <returns>A suitable Gregorian calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetHebrewCalendar(NodaTime.Calendars.HebrewMonthNumbering)">
      <summary>
            Returns a Hebrew calendar, as described at http://en.wikipedia.org/wiki/Hebrew_calendar. This is a
            purely mathematical calculator, applied proleptically to the period where the real calendar was observational. 
            </summary>
      <param name="monthNumbering">The month numbering system to use</param>
      <returns>A Hebrew calendar system for the given month numbering.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetIslamicCalendar(NodaTime.Calendars.IslamicLeapYearPattern,NodaTime.Calendars.IslamicEpoch)">
      <summary>
            Returns an Islamic, or Hijri, calendar system.
            </summary>
      <param name="leapYearPattern">The pattern of years in the 30-year cycle to consider as leap years</param>
      <param name="epoch">The kind of epoch to use (astronomical or civil)</param>
      <returns>A suitable Islamic calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetJulianCalendar(System.Int32)">
      <summary>
            Returns a pure proleptic Julian calendar system, which defines every
            fourth year as a leap year. This implementation follows the leap year rule
            strictly, even for dates before 8 CE, where leap years were actually
            irregular.
            </summary>
      <param name="minDaysInFirstWeek">The minimum number of days in the first week of the year.
            When computing the WeekOfWeekYear and WeekYear properties of a particular date, this is
            used to decide at what point the week year changes.</param>
      <returns>A suitable Julian calendar reference; the same reference may be returned by several
            calls as the object is immutable and thread-safe.</returns>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetMaxMonth(System.Int32)">
      <summary>
            The maximum valid month (inclusive) within this calendar in the given year. It is assumed that
            all calendars start with month 1 and go up to this month number in any valid year.
            </summary>
      <param name="year">The year to consider.</param>
      <returns>The maximum month number within the given year.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given year is invalid for this calendar.
            Note that some implementations may return a month rather than throw this exception (for example, if all
            years have the same number of months in this calendar system). Failure to throw an exception should not be
            treated as an indication that the year is valid.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetMaxYearOfEra(NodaTime.Calendars.Era)">
      <summary>
            Returns the maximum valid year-of-era in the given era.
            </summary>
      <param name="era">The era in which to find the greatest year</param>
      <returns>The maximum valid year in the given era.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is not an era used in this calendar.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="era" /> is null.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetMinYearOfEra(NodaTime.Calendars.Era)">
      <summary>
            Returns the minimum valid year-of-era in the given era.
            </summary>
      <param name="era">The era in which to find the greatest year</param>
      <returns>The minimum valid year in the given eraera.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> is not an era used in this calendar.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="era" /> is null.</exception>
    </member>
    <member name="M:NodaTime.CalendarSystem.GetPersianCalendar">
      <summary>
            Returns a Persian (also known as Solar Hijri) calendar system. This is the main calendar in Iran
            and Afghanistan, and is also used in some other countries where Persian is spoken.
            </summary>
      <returns>A Persian calendar system.</returns>
    </member>
    <member name="P:NodaTime.CalendarSystem.Id">
      <summary>
            Returns the unique identifier for this calendar system. This is provides full round-trip capability
            using <see cref="M:NodaTime.CalendarSystem.ForId(System.String)" /> to retrieve the calendar system from the identifier.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.Ids">
      <summary>
            Returns the IDs of all calendar systems available within Noda Time. The order of the keys is not guaranteed.
            </summary>
    </member>
    <member name="M:NodaTime.CalendarSystem.IsLeapYear(System.Int32)">
      <summary>
            Returns whether or not the given year is a leap year in this calendar.
            </summary>
      <param name="year">The year to consider.</param>
      <returns>True if the given year is a leap year; false otherwise.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The given year is invalid for this calendar.
            Note that some implementations may return a value rather than throw this exception. Failure to throw an
            exception should not be treated as an indication that the year is valid.</exception>
    </member>
    <member name="P:NodaTime.CalendarSystem.Iso">
      <summary>
            Returns a calendar system that follows the rules of the ISO-8601 standard,
            which is compatible with Gregorian for all modern dates.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.MaxYear">
      <summary>
            The maximum valid year (inclusive) within this calendar.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.MinYear">
      <summary>
            The minimum valid year (inclusive) within this calendar.
            </summary>
    </member>
    <member name="P:NodaTime.CalendarSystem.Name">
      <summary>
            Returns the name of this calendar system. Each kind of calendar system has a unique name, but this
            does not usually provide enough information for round-tripping. (For example, the name of an
            Islamic calendar system does not indicate which kind of leap cycle it uses, and other calendars
            specify the minimum number of days in the first week of a year.)
            </summary>
    </member>
    <member name="M:NodaTime.CalendarSystem.ToString">
      <summary>
            Converts this calendar system to text by simply returning its unique ID.
            </summary>
      <returns>The ID of this calendar system.</returns>
    </member>
    <member name="P:NodaTime.CalendarSystem.UsesIsoDayOfWeek">
      <summary>
            Returns whether the day-of-week field refers to ISO days. If true, types such as <see cref="T:NodaTime.LocalDateTime" />
            can use the <see cref="T:NodaTime.IsoDayOfWeek" /> property to avoid using magic numbers.
            This defaults to true, but can be overridden by specific calendars.
            </summary>
    </member>
    <member name="T:NodaTime.DateTimeZone">
      <summary>
            Represents a time zone - a mapping between UTC and local time. A time zone maps UTC instants to local times
             - or, equivalently, to the offset from UTC at any particular instant.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.#ctor(System.String,System.Boolean,NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.DateTimeZone" /> class.
            </summary>
      <param name="id">The unique id of this time zone.</param>
      <param name="isFixed">Set to <c>true</c> if this time zone has no transitions.</param>
      <param name="minOffset">Minimum offset applied within this zone</param>
      <param name="maxOffset">Maximum offset applied within this zone</param>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)">
      <summary>
            Maps the given <see cref="T:NodaTime.LocalDateTime" /> to the corresponding <see cref="T:NodaTime.ZonedDateTime" /> in a lenient
            manner: ambiguous values map to the later of the alternatives, and "skipped" values map to the start of the
            zone interval after the "gap".
            </summary>
      <param name="localDateTime">The local date/time to map.</param>
      <returns>The unambiguous mapping if there is one, the later result if the mapping is ambiguous,
            or the start of the later zone interval if the given local date/time is skipped.</returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)">
      <summary>
            Returns the earliest valid <see cref="T:NodaTime.ZonedDateTime" /> with the given local date.
            </summary>
      <param name="date">The local date to map in this time zone.</param>
      <returns>The <see cref="T:NodaTime.ZonedDateTime" /> representing the earliest time in the given date, in this time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The entire day was skipped due to a very large time zone transition.
            (This is extremely rare.)</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)">
      <summary>
            Maps the given <see cref="T:NodaTime.LocalDateTime" /> to the corresponding <see cref="T:NodaTime.ZonedDateTime" />, if and only if
            that mapping is unambiguous in this time zone.  Otherwise, <see cref="T:NodaTime.SkippedTimeException" /> or
            <see cref="T:NodaTime.AmbiguousTimeException" /> is thrown, depending on whether the mapping is ambiguous or the local
            date/time is skipped entirely.
            </summary>
      <param name="localDateTime">The local date and time to map into this time zone.</param>
      <returns>The unambiguous matching <see cref="T:NodaTime.ZonedDateTime" /> if it exists.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The given local date/time is skipped in this time zone.</exception>
      <exception cref="T:NodaTime.AmbiguousTimeException">The given local date/time is ambiguous in this time zone.</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)">
      <summary>
            Determines whether the specified <see cref="T:NodaTime.DateTimeZone" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:NodaTime.DateTimeZone" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:NodaTime.DateTimeZone" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)">
      <summary>
            Implements equality in derived classes.
            </summary>
      <param name="zone">The zone to compare with this one. This is guaranteed (when called by <see cref="M:NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)" />) to
            be a non-null reference of the same type as this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:NodaTime.DateTimeZone" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)">
      <summary>
            Returns a fixed time zone with the given offset.
            </summary>
      <param name="offset">The offset for the returned time zone</param>
      <returns>A fixed time zone with the given offset.</returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)">
      <summary>
            Returns the offset from UTC, where a positive duration indicates that local time is
            later than UTC. In other words, local time = UTC + offset.
            </summary>
      <param name="instant">The instant for which to calculate the offset.</param>
      <returns>
            The offset from UTC at the specified instant.
            </returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)">
      <summary>
            Gets the zone interval for the given instant; the range of time around the instant in which the same Offset
            applies (with the same split between standard time and daylight saving time, and with the same offset).
            </summary>
      <param name="instant">The <see cref="T:NodaTime.Instant" /> to query.</param>
      <returns>The defined <see cref="T:NodaTime.TimeZones.ZoneInterval" />.</returns>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Returns all the zone intervals which occur for any instant in the interval [<paramref name="start" />, <paramref name="end" />).
            </summary>
      <param name="start">Inclusive start point of the interval for which to retrieve zone intervals.</param>
      <param name="end">Exclusive end point of the interval for which to retrieve zone intervals.</param>
      <returns>A sequence of zone intervals covering the given interval.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="end" /> is earlier than <paramref name="start" />.</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)">
      <summary>
            Returns all the zone intervals which occur for any instant in the given interval.
            </summary>
      <param name="interval">Interval to find zone intervals for.</param>
      <returns>A sequence of zone intervals covering the given interval.</returns>
    </member>
    <member name="P:NodaTime.DateTimeZone.Id">
      <summary>
            The provider's ID for the time zone.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)">
      <summary>
            Returns complete information about how the given <see cref="T:NodaTime.LocalDateTime" /> is mapped in this time zone.
            </summary>
      <param name="localDateTime">The local date and time to map in this time zone.</param>
      <returns>A mapping of the given local date and time to zero, one or two zoned date/time values.</returns>
    </member>
    <member name="P:NodaTime.DateTimeZone.MaxOffset">
      <summary>
            Returns the greatest (most positive) offset within this time zone, over all time.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZone.MinOffset">
      <summary>
            Returns the least (most negative) offset within this time zone, over all time.
            </summary>
    </member>
    <member name="M:NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)">
      <summary>
            Maps the given <see cref="T:NodaTime.LocalDateTime" /> to the corresponding <see cref="T:NodaTime.ZonedDateTime" />, following
            the given <see cref="T:NodaTime.TimeZones.ZoneLocalMappingResolver" /> to handle ambiguity and skipped times.
            </summary>
      <param name="localDateTime">The local date and time to map in this time zone.</param>
      <param name="resolver">The resolver to apply to the mapping.</param>
      <returns>The result of resolving the mapping.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resolver" /> is null.</exception>
    </member>
    <member name="M:NodaTime.DateTimeZone.ToString">
      <summary>
            Returns the ID of this time zone.
            </summary>
      <returns>
            The ID of this time zone.
            </returns>
    </member>
    <member name="P:NodaTime.DateTimeZone.Utc">
      <summary>
            Gets the UTC (Coordinated Universal Time) time zone. This is a single instance which is not
            provider-specific; it is guaranteed to have the ID "UTC", but may or may not be the instance returned by
            e.g. <c>DateTimeZoneProviders.Tzdb["UTC"]</c>.
            </summary>
    </member>
    <member name="T:NodaTime.DateTimeZoneProviders">
      <summary>
            Static access to date/time zone providers built into Noda Time and for global configuration where this is unavoidable.
            All properties are thread-safe, and the providers returned by the read-only properties cache their results.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZoneProviders.Bcl">
      <summary>
            Gets a time zone provider which uses a <see cref="T:NodaTime.TimeZones.BclDateTimeZoneSource" />.
            This property is not available on the PCL build of Noda Time.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZoneProviders.Default">
      <summary>
            Gets the TZDB time zone provider.
            This always returns the same value as the <see cref="P:NodaTime.DateTimeZoneProviders.Tzdb" /> property.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZoneProviders.Serialization">
      <summary>
            The <see cref="T:NodaTime.IDateTimeZoneProvider" /> to use to interpret a time zone ID read as part of
            XML or binary serialization.
            </summary>
    </member>
    <member name="P:NodaTime.DateTimeZoneProviders.Tzdb">
      <summary>
            Gets a time zone provider which uses a <see cref="T:NodaTime.TimeZones.TzdbDateTimeZoneSource" />.
            The underlying source is <see cref="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.Default" />, which is initialized from
            resources within the NodaTime assembly.
            </summary>
    </member>
    <member name="T:NodaTime.Duration">
      <summary>
            Represents a fixed (and calendar-independent) length of time.
            </summary>
    </member>
    <member name="M:NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Adds one duration to another. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.CompareTo(NodaTime.Duration)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>&lt; 0</term><description>This object is less than the <paramref name="other" /> parameter.</description></item><item><term>0</term><description>This object is equal to <paramref name="other" />.</description></item><item><term>&gt; 0</term><description>This object is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)">
      <summary>
            Divides a duration by a number. Friendly alternative to <c>operator/()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of dividing <paramref name="left" /> by
            <paramref name="right" />.</returns>
    </member>
    <member name="F:NodaTime.Duration.Epsilon">
      <summary>
            Represents the <see cref="T:NodaTime.Duration" /> value equals to 1 tick; the smallest amount by which an instant can vary.
            This field is read-only.
            </summary>
    </member>
    <member name="M:NodaTime.Duration.Equals(NodaTime.Duration)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Duration.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.Duration.FromHours(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of hours.
            </summary>
      <param name="hours">The number of hours.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromMilliseconds(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of milliseconds.
            </summary>
      <param name="milliseconds">The number of milliseconds.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromMinutes(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of minutes.
            </summary>
      <param name="minutes">The number of minutes.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromSeconds(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of seconds.
            </summary>
      <param name="seconds">The number of seconds.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromStandardDays(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of days, assuming a 'standard' 24-hour
            day.
            </summary>
      <param name="days">The number of days.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of days.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromStandardWeeks(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of weeks, assuming a 'standard' week
            consisting of seven 24-hour days.
            </summary>
      <param name="weeks">The number of weeks.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of weeks.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromTicks(System.Int64)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the given number of ticks.
            </summary>
      <param name="ticks">The number of ticks.</param>
      <returns>A <see cref="T:NodaTime.Duration" /> representing the given number of ticks.</returns>
    </member>
    <member name="M:NodaTime.Duration.FromTimeSpan(System.TimeSpan)">
      <summary>
            Returns a <see cref="T:NodaTime.Duration" /> that represents the same number of ticks as the
            given <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="timeSpan">The TimeSpan value to convert</param>
      <returns>A new Duration with the same number of ticks as the given TimeSpan.</returns>
    </member>
    <member name="M:NodaTime.Duration.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
    </member>
    <member name="M:NodaTime.Duration.Minus(NodaTime.Duration)">
      <summary>
            Returns the result of subtracting another duration from this one, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="other">The duration to subtract</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of the subtraction.</returns>
    </member>
    <member name="M:NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)">
      <summary>
            Multiplies a duration by a number. Friendly alternative to <c>operator*()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the product of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)">
      <summary>
            Multiplies a duration by a number. Friendly alternative to <c>operator*()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the product of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.Negate(NodaTime.Duration)">
      <summary>
            Implements a friendly alternative to the unary negation operator.
            </summary>
      <param name="duration">Duration to negate</param>
      <returns>The negative value of this duration</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator + (addition).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)">
      <summary>
            Implements the operator / (division).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of dividing <paramref name="left" /> by
            <paramref name="right" />.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &gt; (greater than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &gt;= (greater than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &lt; (less than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator &lt;= (less than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)">
      <summary>
            Implements the operator * (multiplication).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of multiplying <paramref name="left" /> by
            <paramref name="right" />.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)">
      <summary>
            Implements the operator * (multiplication).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of multiplying <paramref name="left" /> by
            <paramref name="right" />.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Implements the operator - (subtraction).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the difference of the given values.</returns>
    </member>
    <member name="M:NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)">
      <summary>
            Implements the unary negation operator.
            </summary>
      <param name="duration">Duration to negate</param>
      <returns>The negative value of this duration</returns>
    </member>
    <member name="M:NodaTime.Duration.Plus(NodaTime.Duration)">
      <summary>
            Returns the result of adding another duration to this one, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="other">The duration to add</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the result of the addition.</returns>
    </member>
    <member name="M:NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)">
      <summary>
            Subtracts one duration from another. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the difference of the given values.</returns>
    </member>
    <member name="P:NodaTime.Duration.Ticks">
      <summary>
            The total number of ticks in the duration.
            </summary>
    </member>
    <member name="M:NodaTime.Duration.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("o"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.Duration.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("o").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Duration.ToTimeSpan">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents the same number of ticks as this
            <see cref="T:NodaTime.Duration" />.
            </summary>
      <returns>A new TimeSpan with the same number of ticks as this Duration.</returns>
    </member>
    <member name="F:NodaTime.Duration.Zero">
      <summary>
            Represents the zero <see cref="T:NodaTime.Duration" /> value. 
            This field is read-only.
            </summary>
    </member>
    <member name="T:NodaTime.IClock">
      <summary>
            Represents a clock which can return the current time as an <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="P:NodaTime.IClock.Now">
      <summary>
            Gets the current <see cref="T:NodaTime.Instant" /> on the time line according to this clock.
            </summary>
    </member>
    <member name="T:NodaTime.IDateTimeZoneProvider">
      <summary>
            Provides stable, performant time zone data.
            </summary>
    </member>
    <member name="M:NodaTime.IDateTimeZoneProvider.GetSystemDefault">
      <summary>
            Gets the time zone from this provider that matches the system default time zone, if a matching time zone is
            available.
            </summary>
      <returns>
            The provider-specific representation of the system default time zone.
            </returns>
      <exception cref="T:NodaTime.TimeZones.DateTimeZoneNotFoundException">The system default time zone is not mapped by
            this provider.</exception>
    </member>
    <member name="M:NodaTime.IDateTimeZoneProvider.GetZoneOrNull(System.String)">
      <summary>
            Returns the time zone for the given ID, if it's available.
            </summary>
      <param name="id">The time zone ID to find.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID or null if the provider does not support
            the given ID.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
    </member>
    <member name="P:NodaTime.IDateTimeZoneProvider.Ids">
      <summary>
            Gets the list of valid time zone ids advertised by this provider.
            </summary>
    </member>
    <member name="P:NodaTime.IDateTimeZoneProvider.Item(System.String)">
      <summary>
            Returns the time zone for the given ID.
            </summary>
      <param name="id">The time zone id to find.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID.</returns>
      <exception cref="T:NodaTime.TimeZones.DateTimeZoneNotFoundException">This provider does not support the given ID.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
    </member>
    <member name="P:NodaTime.IDateTimeZoneProvider.VersionId">
      <summary>
            The version ID of this provider.
            </summary>
    </member>
    <member name="T:NodaTime.Instant">
      <summary>
            Represents an instant on the global timeline.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Instant" /> struct.
            </summary>
      <param name="ticks">The number of ticks since the Unix epoch. Negative values represent instants before the
            Unix epoch.</param>
    </member>
    <member name="M:NodaTime.Instant.Add(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Adds a duration to an instant. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.CompareTo(NodaTime.Instant)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              A 32-bit signed integer that indicates the relative order of the objects being compared.
              The return value has the following meanings:
              <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>&lt; 0</term><description>This object is less than the <paramref name="other" /> parameter.</description></item><item><term>0</term><description>This object is equal to <paramref name="other" />.</description></item><item><term>&gt; 0</term><description>This object is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:NodaTime.Instant.Equals(NodaTime.Instant)">
      <summary>
            Indicates whether the value of this instant is equal to the value of the specified instant.
            </summary>
      <param name="other">The value to compare with this instance.</param>
      <returns>
            true if the value of this instant is equal to the value of the <paramref name="other" /> parameter;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.FromDateTimeOffset(System.DateTimeOffset)">
      <summary>
            Converts a <see cref="T:System.DateTimeOffset" /> into a new Instant representing the same instant in time. Note that
            the offset information is not preserved in the returned Instant.
            </summary>
      <param name="dateTimeOffset">Date and time value with an offset.</param>
      <returns>An <see cref="T:NodaTime.Instant" /> value representing the same instant in time as the given <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:NodaTime.Instant.FromDateTimeUtc(System.DateTime)">
      <summary>
            Converts a <see cref="T:System.DateTime" /> into a new Instant representing the same instant in time.
            </summary>
      <param name="dateTime">Date and time value which must have a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Utc" /></param>
      <returns>An <see cref="T:NodaTime.Instant" /> value representing the same instant in time as the given universal <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not of <see cref="P:System.DateTime.Kind" /><see cref="F:System.DateTimeKind.Utc" />.</exception>
    </member>
    <member name="M:NodaTime.Instant.FromMillisecondsSinceUnixEpoch(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Instant" /> struct based
            on a number of milliseconds since the Unix epoch of (ISO) January 1st 1970, midnight, UTC.
            </summary>
      <param name="milliseconds">Number of milliseconds since the Unix epoch. May be negative (for instants before the epoch).</param>
      <returns>An <see cref="T:NodaTime.Instant" /> at exactly the given number of milliseconds since the Unix epoch.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The constructed instant would be out of the range representable in Noda Time.</exception>
    </member>
    <member name="M:NodaTime.Instant.FromSecondsSinceUnixEpoch(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Instant" /> struct based
            on a number of seconds since the Unix epoch of (ISO) January 1st 1970, midnight, UTC.
            </summary>
      <param name="seconds">Number of seconds since the Unix epoch. May be negative (for instants before the epoch).</param>
      <returns>An <see cref="T:NodaTime.Instant" /> at exactly the given number of seconds since the Unix epoch.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The constructed instant would be out of the range representable in Noda Time.</exception>
    </member>
    <member name="M:NodaTime.Instant.FromTicksSinceUnixEpoch(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Instant" /> struct based
            on a number of ticks since the Unix epoch of (ISO) January 1st 1970, midnight, UTC.
            </summary>
      <param name="ticks">Number of ticks since the Unix epoch. May be negative (for instants before the epoch).</param>
      <returns>An <see cref="T:NodaTime.Instant" /> at exactly the given number of ticks since the Unix epoch.</returns>
    </member>
    <member name="M:NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns a new instant corresponding to the given UTC date and time in the ISO calendar.
            In most cases applications should use <see cref="T:NodaTime.ZonedDateTime" /> to represent a date
            and time, but this method is useful in some situations where an <see cref="T:NodaTime.Instant" /> is
            required, such as time zone testing.
            </summary>
      <param name="year">The year. This is the "absolute year",
            so a value of 0 means 1 BC, for example.</param>
      <param name="monthOfYear">The month of year.</param>
      <param name="dayOfMonth">The day of month.</param>
      <param name="hourOfDay">The hour.</param>
      <param name="minuteOfHour">The minute.</param>
      <returns>An <see cref="T:NodaTime.Instant" /> value representing the given date and time in UTC and the ISO calendar.</returns>
    </member>
    <member name="M:NodaTime.Instant.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns a new instant corresponding to the given UTC date and
            time in the ISO calendar. In most cases applications should 
            use <see cref="T:NodaTime.ZonedDateTime" />
            to represent a date and time, but this method is useful in some 
            situations where an Instant is required, such as time zone testing.
            </summary>
      <param name="year">The year. This is the "absolute year",
            so a value of 0 means 1 BC, for example.</param>
      <param name="monthOfYear">The month of year.</param>
      <param name="dayOfMonth">The day of month.</param>
      <param name="hourOfDay">The hour.</param>
      <param name="minuteOfHour">The minute.</param>
      <param name="secondOfMinute">The second.</param>
      <returns>An <see cref="T:NodaTime.Instant" /> value representing the given date and time in UTC and the ISO calendar.</returns>
    </member>
    <member name="M:NodaTime.Instant.GetHashCode">
      <summary>
              Returns a hash code for this instance.
            </summary>
      <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table. 
            </returns>
    </member>
    <member name="M:NodaTime.Instant.InUtc">
      <summary>
            Returns the <see cref="T:NodaTime.ZonedDateTime" /> representing the same point in time as this instant, in the UTC time
            zone and ISO-8601 calendar. This is a shortcut for calling <see cref="M:NodaTime.Instant.InZone(NodaTime.DateTimeZone)" /> with an
            argument of <see cref="P:NodaTime.DateTimeZone.Utc" />.
            </summary>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> for the same instant, in the UTC time zone
            and the ISO-8601 calendar</returns>
    </member>
    <member name="M:NodaTime.Instant.InZone(NodaTime.DateTimeZone)">
      <summary>
            Returns the <see cref="T:NodaTime.ZonedDateTime" /> representing the same point in time as this instant, in the
            specified time zone and ISO-8601 calendar.
            </summary>
      <param name="zone">The time zone in which to represent this instant.</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> for the same instant, in the given time zone
            and the ISO-8601 calendar</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zone" /> is null.</exception>
    </member>
    <member name="M:NodaTime.Instant.InZone(NodaTime.DateTimeZone,NodaTime.CalendarSystem)">
      <summary>
            Returns the <see cref="T:NodaTime.ZonedDateTime" /> representing the same point in time as this instant, in the
            specified time zone and calendar system.
            </summary>
      <param name="zone">The time zone in which to represent this instant.</param>
      <param name="calendar">The calendar system in which to represent this instant.</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> for the same instant, in the given time zone
            and calendar</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zone" /> or <paramref name="calendar" /> is null.</exception>
    </member>
    <member name="M:NodaTime.Instant.Max(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Returns the later instant of the given two.
            </summary>
      <param name="x">The first instant to compare.</param>
      <param name="y">The second instant to compare.</param>
      <returns>The later instant of <paramref name="x" /> or <paramref name="y" />.</returns>
    </member>
    <member name="F:NodaTime.Instant.MaxValue">
      <summary>
            Represents the largest possible <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.Min(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Returns the earlier instant of the given two.
            </summary>
      <param name="x">The first instant to compare.</param>
      <param name="y">The second instant to compare.</param>
      <returns>The earlier instant of <paramref name="x" /> or <paramref name="y" />.</returns>
    </member>
    <member name="M:NodaTime.Instant.Minus(NodaTime.Duration)">
      <summary>
            Returns the result of subtracting a duration from this instant, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="duration">The duration to subtract</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the result of the subtraction.</returns>
    </member>
    <member name="M:NodaTime.Instant.Minus(NodaTime.Instant)">
      <summary>
            Returns the result of subtracting another instant from this one, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="other">The other instant to subtract</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the result of the subtraction.</returns>
    </member>
    <member name="F:NodaTime.Instant.MinValue">
      <summary>
            Represents the smallest possible <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.op_Addition(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Implements the operator + (addition) for <see cref="T:NodaTime.Instant" /> + <see cref="T:NodaTime.Duration" />.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the sum of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Equality(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_GreaterThan(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &gt; (greater than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_GreaterThanOrEqual(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &gt;= (greater than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Inequality(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_LessThan(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &lt; (less than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_LessThanOrEqual(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator &lt;= (less than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Implements the operator - (subtraction) for <see cref="T:NodaTime.Instant" /> - <see cref="T:NodaTime.Duration" />.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the difference of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.op_Subtraction(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Implements the operator - (subtraction) for <see cref="T:NodaTime.Instant" /> - <see cref="T:NodaTime.Instant" />.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the difference of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.Plus(NodaTime.Duration)">
      <summary>
            Returns the result of adding a duration to this instant, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="duration">The duration to add</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the result of the addition.</returns>
    </member>
    <member name="M:NodaTime.Instant.PlusTicks(System.Int64)">
      <summary>
            Returns a new value of this instant with the given number of ticks added to it.
            </summary>
      <param name="ticksToAdd">The ticks to add to this instant to create the return value.</param>
      <returns>The result of adding the given number of ticks to this instant.</returns>
    </member>
    <member name="M:NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Duration)">
      <summary>
            Subtracts a duration from an instant. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Instant" /> representing the difference of the given values.</returns>
    </member>
    <member name="M:NodaTime.Instant.Subtract(NodaTime.Instant,NodaTime.Instant)">
      <summary>
              Subtracts one instant from another. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Duration" /> representing the difference of the given values.</returns>
    </member>
    <member name="P:NodaTime.Instant.Ticks">
      <summary>
            The number of ticks since the Unix epoch. Negative values represent instants before the Unix epoch.
            </summary>
    </member>
    <member name="M:NodaTime.Instant.ToDateTimeOffset">
      <summary>
            Constructs a <see cref="T:System.DateTimeOffset" /> from this Instant which has an offset of zero.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> representing the same instant in time as this value.</returns>
    </member>
    <member name="M:NodaTime.Instant.ToDateTimeUtc">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this Instant which has a <see cref="P:System.DateTime.Kind" />
            of <see cref="F:System.DateTimeKind.Utc" /> and represents the same instant of time as this value.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representing the same instant in time as this value, with a kind of "universal".</returns>
    </member>
    <member name="M:NodaTime.Instant.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("g"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("g").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Instant.WithOffset(NodaTime.Offset)">
      <summary>
            Returns the <see cref="T:NodaTime.OffsetDateTime" /> representing the same point in time as this instant, with
            the specified UTC offset in the ISO calendar system.
            </summary>
      <param name="offset">The offset from UTC with which to represent this instant.</param>
      <returns>An <see cref="T:NodaTime.OffsetDateTime" /> for the same instant, with the given offset
            in the ISO calendar system</returns>
    </member>
    <member name="M:NodaTime.Instant.WithOffset(NodaTime.Offset,NodaTime.CalendarSystem)">
      <summary>
            Returns the <see cref="T:NodaTime.OffsetDateTime" /> representing the same point in time as this instant, with
            the specified UTC offset and calendar system.
            </summary>
      <param name="offset">The offset from UTC with which to represent this instant.</param>
      <param name="calendar">The calendar system in which to represent this instant.</param>
      <returns>An <see cref="T:NodaTime.OffsetDateTime" /> for the same instant, with the given offset
            and calendar</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null.</exception>
    </member>
    <member name="T:NodaTime.Interval">
      <summary>
            An interval between two instants in time (start and end).
            </summary>
    </member>
    <member name="M:NodaTime.Interval.#ctor(NodaTime.Instant,NodaTime.Instant)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.Interval" /> struct.
            The interval includes the <paramref name="start" /> instant and excludes the
            <paramref name="end" /> instant. The end may equal the start (resulting in an empty interval), but must not be before the start.
            </summary>
      <param name="start">The start <see cref="T:NodaTime.Instant" />.</param>
      <param name="end">The end <see cref="T:NodaTime.Instant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="end" /> is earlier than <paramref name="start" />.</exception>
    </member>
    <member name="M:NodaTime.Interval.Contains(NodaTime.Instant)">
      <summary>
            Returns whether or not this interval contains the given instant.
            </summary>
      <param name="instant">Instant to test.</param>
      <returns>True if this interval contains the given instant; false otherwise.</returns>
    </member>
    <member name="P:NodaTime.Interval.Duration">
      <summary>
            Returns the duration of the interval.
            </summary>
    </member>
    <member name="P:NodaTime.Interval.End">
      <summary>
            Gets the end instant - the exclusive upper bound of the interval.
            </summary>
    </member>
    <member name="M:NodaTime.Interval.Equals(NodaTime.Interval)">
      <summary>
            Indicates whether the value of this interval is equal to the value of the specified interval.
            </summary>
      <param name="other">The value to compare with this instance.</param>
      <returns>
            true if the value of this instant is equal to the value of the <paramref name="other" /> parameter;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Interval.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.Interval.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:NodaTime.Interval.op_Equality(NodaTime.Interval,NodaTime.Interval)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:NodaTime.Interval.op_Inequality(NodaTime.Interval,NodaTime.Interval)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="P:NodaTime.Interval.Start">
      <summary>
            Gets the start instant - the inclusive lower bound of the interval.
            </summary>
    </member>
    <member name="M:NodaTime.Interval.ToString">
      <summary>
            Returns a string representation of this interval, in extended ISO-8601 format: the format
            is "start/end" where each instant uses a format of "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFF'Z'".
            </summary>
      <returns>A string representation of this interval.</returns>
    </member>
    <member name="T:NodaTime.IsoDayOfWeek">
      <summary>
            Equates the days of the week with their numerical value according to
            ISO-8601. This corresponds with System.DayOfWeek except for Sunday, which
            is 7 in the ISO numbering and 0 in System.DayOfWeek.
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.None">
      <summary>
            Value indicating no day of the week; this will never be returned
            by any IsoDayOfWeek property, and is not valid as an argument to
            any method.
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Monday">
      <summary>
            Value representing Monday (1).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Tuesday">
      <summary>
            Value representing Tuesday (2).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Wednesday">
      <summary>
            Value representing Wednesday (3).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Thursday">
      <summary>
            Value representing Thursday (4).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Friday">
      <summary>
            Value representing Friday (5).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Saturday">
      <summary>
            Value representing Saturday (6).
            </summary>
    </member>
    <member name="F:NodaTime.IsoDayOfWeek.Sunday">
      <summary>
            Value representing Sunday (7).
            </summary>
    </member>
    <member name="T:NodaTime.LocalDate">
      <summary>
            LocalDate is an immutable struct representing a date within the calendar,
            with no reference to a particular time zone or time of day.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs an instance for the given era, year of era, month and day in the ISO calendar.
            </summary>
      <param name="era">The era within which to create a date. Must be a valid era within the ISO calendar.</param>
      <param name="yearOfEra">The year of era.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Constructs an instance for the given era, year of era, month and day in the specified calendar.
            </summary>
      <param name="era">The era within which to create a date. Must be a valid era within the specified calendar.</param>
      <param name="yearOfEra">The year of era.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="calendar">Calendar system in which to create the date.</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs an instance for the given year, month and day in the ISO calendar.
            </summary>
      <param name="year">The year. This is the "absolute year", so a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Constructs an instance for the given year, month and day in the specified calendar.
            </summary>
      <param name="year">The year. This is the "absolute year", so, for
            the ISO calendar, a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="calendar">Calendar system in which to create the date.</param>
      <returns>The resulting date.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Adds the specified period to the date. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="date">The date to add the period to</param>
      <param name="period">The period to add. Must not contain any (non-zero) time units.</param>
      <returns>The sum of the given date and period</returns>
    </member>
    <member name="M:NodaTime.LocalDate.At(NodaTime.LocalTime)">
      <summary>
            Combines this <see cref="T:NodaTime.LocalDate" /> with the given <see cref="T:NodaTime.LocalTime" />
            into a single <see cref="T:NodaTime.LocalDateTime" />.
            Fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="time">The time to combine with this date.</param>
      <returns>The <see cref="T:NodaTime.LocalDateTime" /> representation of the given time on this date</returns>
    </member>
    <member name="M:NodaTime.LocalDate.AtMidnight">
      <summary>
            Gets a <see cref="T:NodaTime.LocalDateTime" /> at midnight on the date represented by this local date.
            </summary>
      <returns>The <see cref="T:NodaTime.LocalDateTime" /> representing midnight on this local date, in the same calendar
            system.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Calendar">
      <summary>Gets the calendar system associated with this local date.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)">
      <summary>
            Indicates whether this date is earlier, later or the same as another one.
            </summary>
      <param name="other">The other date to compare this one with</param>
      <returns>A value less than zero if this date is earlier than <paramref name="other" />;
            zero if this date is the same as <paramref name="other" />; a value greater than zero if this date is
            later than <paramref name="other" />.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Day">
      <summary>Gets the day of this local date within the month.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.DayOfWeek">
      <summary>
            Gets the week day of this local date as a number.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDate.DayOfYear">
      <summary>Gets the day of this local date within the year.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.Equals(NodaTime.LocalDate)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for equality. This requires
            that the dates be the same, within the same calendar.
            </summary>
      <param name="other">The value to compare this date with.</param>
      <returns>True if the given value is another local date equal to this one; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for equality. This requires
            that the dates be the same, within the same calendar.
            </summary>
      <param name="obj">The object to compare this date with.</param>
      <returns>True if the given value is another local date equal to this one; false otherwise.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Era">
      <summary>Gets the era of this local date.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the local date corresponding to the given "week year", "week of week year", and "day of week"
            in the ISO calendar system.
            </summary>
      <param name="weekYear">ISO-8601 week year of value to return</param>
      <param name="weekOfWeekYear">ISO-8601 week of week year of value to return</param>
      <param name="dayOfWeek">ISO-8601 day of week to return</param>
      <returns>The date corresponding to the given week year / week of week year / day of week.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.GetHashCode">
      <summary>
            Returns a hash code for this local date.
            </summary>
      <returns>A hash code for this local date.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.IsoDayOfWeek">
      <summary>
            Gets the week day of this local date expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="M:NodaTime.LocalDate.Minus(NodaTime.Period)">
      <summary>
            Subtracts the specified period from this date. Fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="period">The period to subtract. Must not contain any (non-zero) time units.</param>
      <returns>The result of subtracting the given period from this date.</returns>
    </member>
    <member name="P:NodaTime.LocalDate.Month">
      <summary>Gets the month of this local date within the year.</summary>
    </member>
    <member name="M:NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the next <see cref="T:NodaTime.LocalDate" /> falling on the specified <see cref="P:NodaTime.LocalDate.IsoDayOfWeek" />.
            This is a strict "next" - if this date on already falls on the target
            day of the week, the returned value will be a week later.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the next date of.</param>
      <returns>The next <see cref="T:NodaTime.LocalDate" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)">
      <summary>
            Combines the given <see cref="T:NodaTime.LocalDate" /> and <see cref="T:NodaTime.LocalTime" /> components
            into a single <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
      <param name="date">The date to add the time to</param>
      <param name="time">The time to add</param>
      <returns>The sum of the given date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Adds the specified period to the date.
            </summary>
      <param name="date">The date to add the period to</param>
      <param name="period">The period to add. Must not contain any (non-zero) time units.</param>
      <returns>The sum of the given date and period</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for equality. This requires
            that the dates be the same, within the same calendar.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>True if the two dates are the same and in the same calendar; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two LocalDate values to see if the left one is strictly later than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly later than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two LocalDate values to see if the left one is later than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is later than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two <see cref="T:NodaTime.LocalDate" /> values for inequality.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>False if the two dates are the same and in the same calendar; true otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two LocalDate values to see if the left one is strictly earlier than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly earlier than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Compares two LocalDate values to see if the left one is earlier than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is earlier than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the date.
            </summary>
      <param name="date">The date to subtract the period from</param>
      <param name="period">The period to subtract. Must not contain any (non-zero) time units.</param>
      <returns>The result of subtracting the given period from the date</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Plus(NodaTime.Period)">
      <summary>
            Adds the specified period to this date. Fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="period">The period to add. Must not contain any (non-zero) time units.</param>
      <returns>The sum of this date and the given period</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusDays(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of days added.
            </summary>
      <param name="days">The number of days to add</param>
      <returns>The current value plus the given number of days.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusMonths(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of months added.
            </summary>
      <param name="months">The number of months to add</param>
      <returns>The current date plus the given number of months</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusWeeks(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of weeks added.
            </summary>
      <param name="weeks">The number of weeks to add</param>
      <returns>The current value plus the given number of weeks.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.PlusYears(System.Int32)">
      <summary>
            Returns a new LocalDate representing the current value with the given number of years added.
            </summary>
      <param name="years">The number of years to add</param>
      <returns>The current value plus the given number of years.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the previous <see cref="T:NodaTime.LocalDate" /> falling on the specified <see cref="P:NodaTime.LocalDate.IsoDayOfWeek" />.
            This is a strict "previous" - if this date on already falls on the target
            day of the week, the returned value will be a week earlier.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the previous date of.</param>
      <returns>The previous <see cref="T:NodaTime.LocalDate" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the date. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="date">The date to subtract the period from</param>
      <param name="period">The period to subtract. Must not contain any (non-zero) time units.</param>
      <returns>The result of subtracting the given period from the date.</returns>
    </member>
    <member name="M:NodaTime.LocalDate.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("D"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("D").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="P:NodaTime.LocalDate.WeekOfWeekYear">
      <summary>Gets the week within the WeekYear. See <see cref="P:NodaTime.LocalDate.WeekYear" /> for more details.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.WeekYear">
      <summary>
            Gets the "week year" of this local date.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)">
      <summary>
            Creates a new LocalDate representing the same physical date, but in a different calendar.
            The returned LocalDate is likely to have different field values to this one.
            For example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.
            </summary>
      <param name="calendarSystem">The calendar system to convert this local date to.</param>
      <returns>The converted LocalDate</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendarSystem" /> is null.</exception>
    </member>
    <member name="P:NodaTime.LocalDate.Year">
      <summary>Gets the year of this local date.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.YearOfCentury">
      <summary>Gets the year of this local date within the century.</summary>
    </member>
    <member name="P:NodaTime.LocalDate.YearOfEra">
      <summary>Gets the year of this local date within the era.</summary>
    </member>
    <member name="T:NodaTime.LocalDateTime">
      <summary>
            A date and time in a particular calendar system. A LocalDateTime value does not represent an
            instant on the time line, because it has no associated time zone: "November 12th 2009 7pm, ISO calendar"
            occurred at different instants for different people around the world.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct using the ISO calendar system.
            </summary>
      <param name="year">The year. This is the "absolute year",
            so a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so, for
            the ISO calendar, a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct using the ISO calendar system.
            </summary>
      <param name="year">The year. This is the "absolute year",
            so a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so, for
            the ISO calendar, a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct using the ISO calendar system.
            </summary>
      <param name="year">The year. This is the "absolute year",
            so a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so, for
            the ISO calendar, a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year",
            so a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <param name="tickWithinMillisecond">The tick within millisecond.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.LocalDateTime" /> struct.
            </summary>
      <param name="year">The year. This is the "absolute year", so, for
            the ISO calendar, a value of 0 means 1 BC, for example.</param>
      <param name="month">The month of year.</param>
      <param name="day">The day of month.</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="second">The second.</param>
      <param name="millisecond">The millisecond.</param>
      <param name="tickWithinMillisecond">The tick within millisecond.</param>
      <param name="calendar">The calendar.</param>
      <returns>The resulting date/time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date/time.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.Add(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Add the specified period to the date and time. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to add</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Calendar">
      <summary>Gets the calendar system associated with this local date and time.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.CenturyOfEra">
      <summary>Gets the century within the era of this local date and time.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.ClockHourOfHalfDay">
      <summary>
            Gets the hour of the half-day of this local date and time, in the range 1 to 12 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.CompareTo(NodaTime.LocalDateTime)">
      <summary>
            Indicates whether this date/time is earlier, later or the same as another one.
            </summary>
      <param name="other">The other local date/time to compare with this value.</param>
      <returns>A value less than zero if this date/time is earlier than <paramref name="other" />;
            zero if this date/time is the same as <paramref name="other" />; a value greater than zero if this date/time is
            later than <paramref name="other" />.</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Date">
      <summary>
            Gets the date portion of this local date and time as a <see cref="T:NodaTime.LocalDate" /> in the same calendar system as this value.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.Day">
      <summary>
            Gets the day of this local date and time within the month.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.DayOfWeek">
      <summary>
            Gets the week day of this local date and time as a number.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.DayOfYear">
      <summary>
            Gets the day of this local date and time within the year.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Equals(NodaTime.LocalDateTime)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Era">
      <summary>Gets the era of this local date and time.</summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.FromDateTime(System.DateTime)">
      <summary>
            Converts a <see cref="T:System.DateTime" /> of any kind to a LocalDateTime in the ISO calendar. This does not perform
            any time zone conversions, so a DateTime with a <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Utc" />
            will still have the same day/hour/minute etc - it won't be converted into the local system time.
            </summary>
      <param name="dateTime">Value to convert into a Noda Time local date and time</param>
      <returns>A new <see cref="T:NodaTime.LocalDateTime" /> with the same values as the specified <c>DateTime</c>.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Hour">
      <summary>
            Gets the hour of day of this local date and time, in the range 0 to 23 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.InUtc">
      <summary>
            Returns the mapping of this local date/time within <see cref="P:NodaTime.DateTimeZone.Utc" />.
            </summary>
      <returns>The result of mapping this local date/time in UTC.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.InZone(NodaTime.DateTimeZone,NodaTime.TimeZones.ZoneLocalMappingResolver)">
      <summary>
            Resolves this local date and time into a <see cref="T:NodaTime.ZonedDateTime" /> in the given time zone, following
            the given <see cref="T:NodaTime.TimeZones.ZoneLocalMappingResolver" /> to handle ambiguity and skipped times.
            </summary>
      <param name="zone">The time zone to map this local date and time into</param>
      <param name="resolver">The resolver to apply to the mapping.</param>
      <returns>The result of resolving the mapping.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zone" /> or <paramref name="resolver" /> is null.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.InZoneLeniently(NodaTime.DateTimeZone)">
      <summary>
            Returns the mapping of this local date/time within the given <see cref="T:NodaTime.DateTimeZone" />,
            with "lenient" rules applied such that ambiguous values map to the
            later of the alternatives, and "skipped" values map to the start of the zone interval
            after the "gap".
            </summary>
      <param name="zone">The time zone in which to map this local date/time.</param>
      <returns>The result of mapping this local date/time in the given time zone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zone" /> is null.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.InZoneStrictly(NodaTime.DateTimeZone)">
      <summary>
            Returns the mapping of this local date/time within the given <see cref="T:NodaTime.DateTimeZone" />,
            with "strict" rules applied such that an exception is thrown if either the mapping is
            ambiguous or the time is skipped.
            </summary>
      <param name="zone">The time zone in which to map this local date/time.</param>
      <returns>The result of mapping this local date/time in the given time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">This local date/time is skipped in the given time zone.</exception>
      <exception cref="T:NodaTime.AmbiguousTimeException">This local date/time is ambiguous in the given time zone.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zone" /> is null.</exception>
    </member>
    <member name="P:NodaTime.LocalDateTime.IsoDayOfWeek">
      <summary>
            Gets the week day of this local date and time expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="P:NodaTime.LocalDateTime.Millisecond">
      <summary>
            Gets the millisecond of this local date and time within the second, in the range 0 to 999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Minus(NodaTime.Period)">
      <summary>
            Subtracts a period from a local date/time. Fields are subtracted in the order provided by the period.
            This is a convenience operator over the <see cref="M:NodaTime.LocalDateTime.Minus(NodaTime.Period)" /> method.
            </summary>
      <param name="period">Period to subtract</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Minute">
      <summary>
            Gets the minute of this local date and time, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.Month">
      <summary>
            Gets the month of this local date and time within the year.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Next(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the next <see cref="T:NodaTime.LocalDateTime" /> falling on the specified <see cref="P:NodaTime.LocalDateTime.IsoDayOfWeek" />,
            at the same time of day as this value.
            This is a strict "next" - if this value on already falls on the target
            day of the week, the returned value will be a week later.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the next date of.</param>
      <returns>The next <see cref="T:NodaTime.LocalDateTime" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Addition(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Adds a period to a local date/time. Fields are added in the order provided by the period.
            This is a convenience operator over the <see cref="M:NodaTime.LocalDateTime.Plus(NodaTime.Period)" /> method.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to add</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Equality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_GreaterThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Compares two LocalDateTime values to see if the left one is strictly later than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly later than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_GreaterThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Compares two LocalDateTime values to see if the left one is later than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is later than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Inequality(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_LessThan(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Compares two LocalDateTime values to see if the left one is strictly earlier than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly earlier than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_LessThanOrEqual(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Compares two LocalDateTime values to see if the left one is earlier than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is earlier than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.op_Subtraction(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Subtracts a period from a local date/time. Fields are subtracted in the order provided by the period.
            This is a convenience operator over the <see cref="M:NodaTime.LocalDateTime.Minus(NodaTime.Period)" /> method.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to subtract</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Plus(NodaTime.Period)">
      <summary>
            Adds a period to this local date/time. Fields are added in the order provided by the period.
            </summary>
      <param name="period">Period to add</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusDays(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of days added.
            </summary>
      <param name="days">The number of days to add</param>
      <returns>The current value plus the given number of days.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusHours(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of hours added.
            </summary>
      <param name="hours">The number of hours to add</param>
      <returns>The current value plus the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusMilliseconds(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of milliseconds added.
            </summary>
      <param name="milliseconds">The number of milliseconds to add</param>
      <returns>The current value plus the given number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusMinutes(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of minutes added.
            </summary>
      <param name="minutes">The number of minutes to add</param>
      <returns>The current value plus the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusMonths(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of months added.
            </summary>
      <param name="months">The number of months to add</param>
      <returns>The current value plus the given number of months.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusSeconds(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of seconds added.
            </summary>
      <param name="seconds">The number of seconds to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusTicks(System.Int64)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of ticks added.
            </summary>
      <param name="ticks">The number of ticks to add</param>
      <returns>The current value plus the given number of ticks.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusWeeks(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of weeks added.
            </summary>
      <param name="weeks">The number of weeks to add</param>
      <returns>The current value plus the given number of weeks.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.PlusYears(System.Int32)">
      <summary>
            Returns a new LocalDateTime representing the current value with the given number of years added.
            </summary>
      <param name="years">The number of years to add</param>
      <returns>The current value plus the given number of years.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.Previous(NodaTime.IsoDayOfWeek)">
      <summary>
            Returns the previous <see cref="T:NodaTime.LocalDateTime" /> falling on the specified <see cref="P:NodaTime.LocalDateTime.IsoDayOfWeek" />,
            at the same time of day as this value.
            This is a strict "previous" - if this value on already falls on the target
            day of the week, the returned value will be a week earlier.
            </summary>
      <param name="targetDayOfWeek">The ISO day of the week to return the previous date of.</param>
      <returns>The previous <see cref="T:NodaTime.LocalDateTime" /> falling on the specified day of the week.</returns>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetDayOfWeek" /> is not a valid day of the
            week (Monday to Sunday).</exception>
    </member>
    <member name="P:NodaTime.LocalDateTime.Second">
      <summary>
            Gets the second of this local date and time within the minute, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.Subtract(NodaTime.LocalDateTime,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the date and time. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="localDateTime">Initial local date and time</param>
      <param name="period">Period to subtract</param>
      <returns>The resulting local date and time</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.TickOfDay">
      <summary>
            Gets the tick of this local date and time within the day, in the range 0 to 863,999,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.TickOfSecond">
      <summary>
            Gets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.TimeOfDay">
      <summary>
            Gets the time portion of this local date and time as a <see cref="T:NodaTime.LocalTime" />.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToDateTimeUnspecified">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this value which has a <see cref="P:System.DateTime.Kind" />
            of <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> value for the same date and time as this value.</returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("G"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.LocalDateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("G").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.WeekOfWeekYear">
      <summary>
            Gets the week within the WeekYear. See <see cref="P:NodaTime.LocalDateTime.WeekYear" /> for more details.
            </summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.WeekYear">
      <summary>
            Gets the "week year" of this local date and time.
            </summary>
    </member>
    <member name="M:NodaTime.LocalDateTime.WithCalendar(NodaTime.CalendarSystem)">
      <summary>
            Creates a new LocalDateTime representing the same physical date and time, but in a different calendar.
            The returned LocalDateTime is likely to have different date field values to this one.
            For example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.
            </summary>
      <param name="calendarSystem">The calendar system to convert this local date to.</param>
      <returns>The converted LocalDateTime.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendarSystem" /> is null.</exception>
    </member>
    <member name="M:NodaTime.LocalDateTime.WithOffset(NodaTime.Offset)">
      <summary>
            Returns an <see cref="T:NodaTime.OffsetDateTime" /> for this local date/time with the given offset.
            </summary>
      <param name="offset">The offset to apply.</param>
      <returns>The result of this local date/time offset by the given amount.</returns>
    </member>
    <member name="P:NodaTime.LocalDateTime.Year">
      <summary>Gets the year of this local date and time.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.YearOfCentury">
      <summary>Gets the year of this local date and time within its century.</summary>
    </member>
    <member name="P:NodaTime.LocalDateTime.YearOfEra">
      <summary>Gets the year of this local date and time within its era.</summary>
    </member>
    <member name="T:NodaTime.LocalTime">
      <summary>
            LocalTime is an immutable struct representing a time of day, with no reference
            to a particular calendar, time zone or date.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour and minute, with second, millisecond-of-second
            and tick-of-millisecond values of zero.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time.</exception>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour, minute and second,
            with millisecond-of-second and tick-of-millisecond values of zero.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <param name="second">The second of the minute.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time.</exception>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour, minute, second and millisecond,
            with a tick-of-millisecond value of zero.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <param name="second">The second of the minute.</param>
      <param name="millisecond">The millisecond of the second.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time.</exception>
    </member>
    <member name="M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a local time at the given hour, minute, second, millisecond and tick within millisecond.
            </summary>
      <param name="hour">The hour of day.</param>
      <param name="minute">The minute of the hour.</param>
      <param name="second">The second of the minute.</param>
      <param name="millisecond">The millisecond of the second.</param>
      <param name="tickWithinMillisecond">The tick within the millisecond.</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time.</exception>
    </member>
    <member name="M:NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Adds the specified period to the time. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="time">The time to add the period to</param>
      <param name="period">The period to add. Must not contain any (non-zero) date units.</param>
      <returns>The sum of the given time and period</returns>
    </member>
    <member name="P:NodaTime.LocalTime.ClockHourOfHalfDay">
      <summary>
            Gets the hour of the half-day of this local time, in the range 1 to 12 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)">
      <summary>
            Indicates whether this time is earlier, later or the same as another one.
            </summary>
      <param name="other">The other date/time to compare this one with</param>
      <returns>A value less than zero if this time is earlier than <paramref name="other" />;
            zero if this time is the same as <paramref name="other" />; a value greater than zero if this time is
            later than <paramref name="other" />.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Equals(NodaTime.LocalTime)">
      <summary>
            Compares this local time with the specified one for equality,
            by checking whether the two values represent the exact same local time, down to the tick.
            </summary>
      <param name="other">The other local time to compare this one with</param>
      <returns>True if the specified time is equal to this one; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Equals(System.Object)">
      <summary>
            Compares this local time with the specified reference. A local time is
            only equal to another local time with the same underlying tick value.
            </summary>
      <param name="obj">The object to compare this one with</param>
      <returns>True if the specified value is a local time is equal to this one; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Factory method for creating a local time from the hour of day, minute of hour, second of minute, and tick of second.
            </summary>
      <param name="hour">The hour of day in the desired time, in the range [0, 23].</param>
      <param name="minute">The minute of hour in the desired time, in the range [0, 59].</param>
      <param name="second">The second of minute in the desired time, in the range [0, 59].</param>
      <param name="tickWithinSecond">The tick within the second in the desired time, in the range [0, 9999999].</param>
      <returns>The resulting time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid time.</exception>
    </member>
    <member name="M:NodaTime.LocalTime.FromMillisecondsSinceMidnight(System.Int32)">
      <summary>
            Factory method for creating a local time from the number of milliseconds which have elapsed since midnight.
            </summary>
      <param name="milliseconds">The number of milliseconds, in the range [0, 86,399,999]</param>
      <returns>The resulting time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.FromSecondsSinceMidnight(System.Int32)">
      <summary>
            Factory method for creating a local time from the number of seconds which have elapsed since midnight.
            </summary>
      <param name="seconds">The number of seconds, in the range [0, 86,399]</param>
      <returns>The resulting time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.FromTicksSinceMidnight(System.Int64)">
      <summary>
            Factory method for creating a local time from the number of ticks which have elapsed since midnight.
            </summary>
      <param name="ticks">The number of ticks, in the range [0, 863,999,999,999]</param>
      <returns>The resulting time.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.GetHashCode">
      <summary>
            Returns a hash code for this local time.
            </summary>
      <returns>A hash code for this local time.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.Hour">
      <summary>
            Gets the hour of day of this local time, in the range 0 to 23 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.LocalDateTime">
      <summary>
            Returns a <see cref="T:NodaTime.LocalDateTime" /> with this local time, on January 1st 1970 in the ISO
            calendar.
            </summary>
    </member>
    <member name="F:NodaTime.LocalTime.Midnight">
      <summary>
            Local time at midnight, i.e. 0 hours, 0 minutes, 0 seconds.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.Millisecond">
      <summary>
            Gets the millisecond of this local time within the second, in the range 0 to 999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.Minus(NodaTime.Period)">
      <summary>
            Subtracts the specified period from this time. Fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="period">The period to subtract. Must not contain any (non-zero) date units.</param>
      <returns>The result of subtracting the given period from this time.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.Minute">
      <summary>
            Gets the minute of this local time, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="F:NodaTime.LocalTime.Noon">
      <summary>
            Local time at noon, i.e. 12 hours, 0 minutes, 0 seconds.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.On(NodaTime.LocalDate)">
      <summary>
            Combines this <see cref="T:NodaTime.LocalTime" /> with the given <see cref="T:NodaTime.LocalDate" />
            into a single <see cref="P:NodaTime.LocalTime.LocalDateTime" />.
            Fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="date">The date to combine with this time</param>
      <returns>The <see cref="P:NodaTime.LocalTime.LocalDateTime" /> representation of the given time on this date</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Creates a new local time by adding a period to an existing time. The period must not contain
            any date-related units (days etc) with non-zero values.
            </summary>
      <param name="time">The time to add the period to</param>
      <param name="period">The period to add</param>
      <returns>The result of adding the period to the time, wrapping via midnight if necessary</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two local times for equality, by checking whether they represent
            the exact same local time, down to the tick.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>True if the two times are the same; false otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two LocalTime values to see if the left one is strictly later than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly later than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two LocalTime values to see if the left one is later than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is later than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two local times for inequality.
            </summary>
      <param name="lhs">The first value to compare</param>
      <param name="rhs">The second value to compare</param>
      <returns>False if the two times are the same; true otherwise</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two LocalTime values to see if the left one is strictly earlier than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly earlier than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Compares two LocalTime values to see if the left one is earlier than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is earlier than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Creates a new local time by subtracting a period from an existing time. The period must not contain
            any date-related units (days etc) with non-zero values.
            </summary>
      <param name="time">The time to subtract the period from</param>
      <param name="period">The period to subtract</param>
      <returns>The result of subtract the period from the time, wrapping via midnight if necessary</returns>
    </member>
    <member name="M:NodaTime.LocalTime.Plus(NodaTime.Period)">
      <summary>
            Adds the specified period to this time. Fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="period">The period to add. Must not contain any (non-zero) date units.</param>
      <returns>The sum of this time and the given period</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusHours(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of hours added.
            </summary>
      <param name="hours">The number of hours to add</param>
      <returns>The current value plus the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusMilliseconds(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of milliseconds added.
            </summary>
      <param name="milliseconds">The number of milliseconds to add</param>
      <returns>The current value plus the given number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusMinutes(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of minutes added.
            </summary>
      <param name="minutes">The number of minutes to add</param>
      <returns>The current value plus the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusSeconds(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of seconds added.
            </summary>
      <param name="seconds">The number of seconds to add</param>
      <returns>The current value plus the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.LocalTime.PlusTicks(System.Int64)">
      <summary>
            Returns a new LocalTime representing the current value with the given number of ticks added.
            </summary>
      <param name="ticks">The number of ticks to add</param>
      <returns>The current value plus the given number of ticks.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.Second">
      <summary>
            Gets the second of this local time within the minute, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)">
      <summary>
            Subtracts the specified period from the time. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="time">The time to subtract the period from</param>
      <param name="period">The period to subtract. Must not contain any (non-zero) date units.</param>
      <returns>The result of subtracting the given period from the time.</returns>
    </member>
    <member name="P:NodaTime.LocalTime.TickOfDay">
      <summary>
            Gets the tick of this local time within the day, in the range 0 to 863,999,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.LocalTime.TickOfSecond">
      <summary>
            Gets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.LocalTime.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("T"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("T").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="T:NodaTime.NodaConstants">
      <summary>
            Useful constants, mostly along the lines of "number of milliseconds in an hour".
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.BclEpoch">
      <summary>
            The instant at the BCL epoch of midnight 1st January 0001 UTC.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.DaysPerStandardWeek">
      <summary>
            Number of days in a standard Gregorian week.
            The value of this constant is 7.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.HoursPerStandardDay">
      <summary>
            A constant for the number of hours in a standard day. Note that the number of hours
            in a day can vary due to daylight saving effects.
            The value of this constant is 24.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.HoursPerStandardWeek">
      <summary>
            A constant for the number of hours in a standard week of seven 24-hour days.
            The value of this constant is 168.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerHour">
      <summary>
            A constant for the number of milliseconds per hour.
            The value of this constant is 3,600,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerMinute">
      <summary>
            A constant for the number of milliseconds per minute.
            The value of this constant is 60,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerSecond">
      <summary>
            A constant for the number of milliseconds per second.
            The value of this constant is 1000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerStandardDay">
      <summary>
            A constant for the number of milliseconds per standard 24-hour day.
            The value of this constant is 86,400,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MillisecondsPerStandardWeek">
      <summary>
            A constant for the number of milliseconds per standard week of seven 24-hour days.
            The value of this constant is 604,800,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MinutesPerHour">
      <summary>
            A constant for the number of minutes per hour.
            The value of this constant is 60.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MinutesPerStandardDay">
      <summary>
            A constant for the number of minutes per standard 24-hour day.
            The value of this constant is 1,440.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.MinutesPerStandardWeek">
      <summary>
            A constant for the number of minutes per standard week of seven 24-hour days.
            The value of this constant is 10,080.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerHour">
      <summary>
            A constant for the number of seconds per hour.
            The value of this constant is 3,600.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerMinute">
      <summary>
            A constant for the number of seconds per minute.
            The value of this constant is 60.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerStandardDay">
      <summary>
            A constant for the number of seconds per standard 24-hour day.
            The value of this constant is 86,400.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.SecondsPerWeek">
      <summary>
            A constant for the number of seconds per standard week of seven 24-hour days.
            The value of this constant is 604,800.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerHour">
      <summary>
            A constant for the number of ticks in an hour. The value of this constant is 36,000,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerMillisecond">
      <summary>
            A constant for the number of ticks in a millisecond. The value of this constant is 10,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerMinute">
      <summary>
            A constant for the number of ticks in a minute. The value of this constant is 600,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerSecond">
      <summary>
            A constant for the number of ticks in a second. The value of this constant is 10,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerStandardDay">
      <summary>
            A constant for the number of ticks in a standard 24-hour day.
            The value of this constant is 864,000,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.TicksPerStandardWeek">
      <summary>
            A constant for the number of ticks in a standard week of seven 24-hour days.
            The value of this constant is 6,048,000,000,000.
            </summary>
    </member>
    <member name="F:NodaTime.NodaConstants.UnixEpoch">
      <summary>
            The instant at the Unix epoch of midnight 1st January 1970 UTC.
            </summary>
    </member>
    <member name="T:NodaTime.Offset">
      <summary>
            An offset from UTC in milliseconds. A positive value means that the local time is
            ahead of UTC (e.g. for Europe); a negative value means that the local time is behind
            UTC (e.g. for America).
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Add(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Adds one Offset to another. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the sum of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.CompareTo(NodaTime.Offset)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              A 32-bit signed integer that indicates the relative order of the objects being compared.
              The return value has the following meanings:
              <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>&lt; 0</term><description>This object is less than the <paramref name="other" /> parameter.</description></item><item><term>0</term><description>This object is equal to <paramref name="other" />.</description></item><item><term>&gt; 0</term><description>This object is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:NodaTime.Offset.Equals(NodaTime.Offset)">
      <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
              true if the current object is equal to the <paramref name="other" /> parameter;
              otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.Equals(System.Object)">
      <summary>
              Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.FromHours(System.Int32)">
      <summary>
            Creates an offset with the specified number of hours, which may be negative.
            </summary>
      <param name="hours">The number of hours to represent in the new offset.</param>
      <returns>
            A new <see cref="T:NodaTime.Offset" /> representing the given value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.FromHoursAndMinutes(System.Int32,System.Int32)">
      <summary>
            Creates an offset with the specified number of hours and minutes.
            </summary>
      <param name="hours">The number of hours to represent in the new offset.</param>
      <param name="minutes">The number of minutes to represent in the new offset.</param>
      <returns>
            A new <see cref="T:NodaTime.Offset" /> representing the given value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.FromMilliseconds(System.Int32)">
      <summary>
            Returns the offset for the given milliseconds value, which may be negative.
            </summary>
      <param name="milliseconds">The int milliseconds value.</param>
      <returns>The <see cref="T:NodaTime.Offset" /> for the given milliseconds value</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.FromTicks(System.Int64)">
      <summary>
            Creates a new offset from the given number of ticks, which may be negative.
            </summary>
      <param name="ticks">The number of ticks specifying the length of the new offset.</param>
      <returns>An offset representing the given number of ticks, to the (truncated) millisecond.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.GetHashCode">
      <summary>
              Returns a hash code for this instance.
            </summary>
      <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table. 
            </returns>
    </member>
    <member name="M:NodaTime.Offset.Max(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Returns the greater offset of the given two, i.e. the one which will give a later local
            time when added to an instant.
            </summary>
      <param name="x">The first offset</param>
      <param name="y">The second offset</param>
      <returns>The greater offset of <paramref name="x" /> and <paramref name="y" />.</returns>
    </member>
    <member name="F:NodaTime.Offset.MaxValue">
      <summary>
            The maximum permitted offset; one millisecond less than a standard day after UTC.
            </summary>
    </member>
    <member name="P:NodaTime.Offset.Milliseconds">
      <summary>
            Gets the total number of milliseconds in the offset, which may be negative.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Min(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Returns the lower offset of the given two, i.e. the one which will give an earlier local
            time when added to an instant.
            </summary>
      <param name="x">The first offset</param>
      <param name="y">The second offset</param>
      <returns>The lower offset of <paramref name="x" /> and <paramref name="y" />.</returns>
    </member>
    <member name="M:NodaTime.Offset.Minus(NodaTime.Offset)">
      <summary>
            Returns the result of subtracting another Offset from this one, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="other">The offset to subtract</param>
      <returns>The result of subtracting the other offset from this one.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="F:NodaTime.Offset.MinValue">
      <summary>
            The minimum permitted offset; one millisecond less than a standard day before UTC.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.Negate(NodaTime.Offset)">
      <summary>
            Returns the negation of the specified offset. This is the method form of the unary minus operator.
            </summary>
      <param name="offset">The offset to negate.</param>
      <returns>The negation of the specified offset.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_Addition(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator + (addition).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the sum of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.op_Equality(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_GreaterThan(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator &gt; (greater than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_GreaterThanOrEqual(NodaTime.Offset,NodaTime.Offset)">
      <summary>
              Implements the operator &gt;= (greater than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is greater than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_Inequality(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_LessThan(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator &lt; (less than).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_LessThanOrEqual(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator &lt;= (less than or equal).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if the left value is less than or equal to the right value, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_Subtraction(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Implements the operator - (subtraction).
            </summary>
      <param name="minuend">The left hand side of the operator.</param>
      <param name="subtrahend">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the difference of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.op_UnaryNegation(NodaTime.Offset)">
      <summary>
              Implements the unary operator - (negation).
            </summary>
      <param name="offset">The offset to negate.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> instance with a negated value.</returns>
    </member>
    <member name="M:NodaTime.Offset.op_UnaryPlus(NodaTime.Offset)">
      <summary>
            Implements the unary operator + .
            </summary>
      <param name="offset">The operand.</param>
      <returns>The same <see cref="T:NodaTime.Offset" /> instance</returns>
    </member>
    <member name="M:NodaTime.Offset.Plus(NodaTime.Offset)">
      <summary>
            Returns the result of adding another Offset to this one, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="other">The offset to add</param>
      <returns>The result of adding the other offset to this one.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="M:NodaTime.Offset.Subtract(NodaTime.Offset,NodaTime.Offset)">
      <summary>
            Subtracts one Offset from another. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="minuend">The left hand side of the operator.</param>
      <param name="subtrahend">The right hand side of the operator.</param>
      <returns>A new <see cref="T:NodaTime.Offset" /> representing the difference of the given values.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The result of the operation is outside the range of Offset.</exception>
    </member>
    <member name="P:NodaTime.Offset.Ticks">
      <summary>
            Returns the number of ticks represented by this offset, which may be negative.
            </summary>
    </member>
    <member name="M:NodaTime.Offset.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("g"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("g").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="M:NodaTime.Offset.ToTimeSpan">
      <summary>
            Converts this offset to a .NET standard <see cref="T:System.TimeSpan" /> value.
            </summary>
      <returns>An equivalent <see cref="T:System.TimeSpan" /> to this value.</returns>
    </member>
    <member name="F:NodaTime.Offset.Zero">
      <summary>
            An offset of zero ticks - effectively the permanent offset for UTC.
            </summary>
    </member>
    <member name="T:NodaTime.OffsetDateTime">
      <summary>
            A local date and time in a particular calendar system, combined with an offset from UTC. This is
            broadly similar to <see cref="T:System.DateTimeOffset" /> in the BCL.
            </summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.Offset)">
      <summary>
            Constructs a new offset date/time with the given local date and time, and the given offset from UTC.
            </summary>
      <param name="localDateTime">Local date and time to represent</param>
      <param name="offset">Offset from UTC</param>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Calendar">
      <summary>Gets the calendar system associated with this local date and time.</summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.ClockHourOfHalfDay">
      <summary>
            Gets the hour of the half-day of this date and time, in the range 1 to 12 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Date">
      <summary>
            Gets the local date represented by this offset date and time. The returned <see cref="T:NodaTime.LocalDate" />
            will have the same calendar system and return the same values for each of the date-based calendar
            properties (Year, MonthOfYear and so on), but will not have any offset information.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Day">
      <summary>Gets the day of this offset date and time within the month.</summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.DayOfWeek">
      <summary>
            Gets the week day of this offset date and time as a number.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.DayOfYear">
      <summary>Gets the day of this offset date and time within the year.</summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.Equals(NodaTime.OffsetDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.OffsetDateTime" /> values for equality. This requires
            that the local date/time values be the same (in the same calendar) and the offsets.
            </summary>
      <param name="other">The value to compare this offset date/time with.</param>
      <returns>True if the given value is another offset date/time equal to this one; false otherwise.</returns>
    </member>
    <member name="M:NodaTime.OffsetDateTime.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:NodaTime.OffsetDateTime" /> values for equality. This requires
            that the local date/time values be the same (in the same calendar) and the offsets.
            </summary>
      <param name="obj">The object to compare this date with.</param>
      <returns>True if the given value is another offset date/time equal to this one; false otherwise.</returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Era">
      <summary>Gets the era of this offset date and time.</summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.FromDateTimeOffset(System.DateTimeOffset)">
      <summary>
            Builds an <see cref="T:NodaTime.OffsetDateTime" /> from a BCL <see cref="T:System.DateTimeOffset" /> by converting
            the <see cref="T:System.DateTime" /> part to a <see cref="P:NodaTime.OffsetDateTime.LocalDateTime" />, and the offset part to an <see cref="P:NodaTime.OffsetDateTime.Offset" />.
            </summary>
      <param name="dateTimeOffset">DateTimeOffset to convert</param>
      <returns>The converted offset date and time</returns>
    </member>
    <member name="M:NodaTime.OffsetDateTime.GetHashCode">
      <summary>
            Returns a hash code for this local date.
            </summary>
      <returns>A hash code for this local date.</returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Hour">
      <summary>
            Gets the hour of day of this offset date and time, in the range 0 to 23 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.InFixedZone">
      <summary>
            Returns this value as a <see cref="T:NodaTime.ZonedDateTime" />.
            </summary>
      <returns>A zoned date/time with the same local time and a fixed time zone using the offset from this value.</returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.IsoDayOfWeek">
      <summary>
            Gets the week day of this offset date and time expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="P:NodaTime.OffsetDateTime.LocalDateTime">
      <summary>
            Returns the local date and time represented within this offset date and time.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Millisecond">
      <summary>
            Gets the millisecond of this offset date and time within the second, in the range 0 to 999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Minute">
      <summary>
            Gets the minute of this offset date and time, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Month">
      <summary>Gets the month of this offset date and time within the year.</summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Offset">
      <summary>
            Returns the offset from UTC.
            </summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.op_Equality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)">
      <summary>
            Implements the operator == (equality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.OffsetDateTime.op_Inequality(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)">
      <summary>
            Implements the operator != (inequality).
            </summary>
      <param name="left">The left hand side of the operator.</param>
      <param name="right">The right hand side of the operator.</param>
      <returns>
        <c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Second">
      <summary>
            Gets the second of this offset date and time within the minute, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.TickOfDay">
      <summary>
            Gets the tick of this offset date and time within the day, in the range 0 to 863,999,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.TickOfSecond">
      <summary>
            Gets the tick of this offset date and time within the second, in the range 0 to 9,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.TimeOfDay">
      <summary>
            Gets the time portion of this offset date and time. The returned <see cref="T:NodaTime.LocalTime" /> will
            return the same values for each of the time-based properties (Hour, Minute and so on), but
            will not have any offset information.
            </summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.ToDateTimeOffset">
      <summary>
            Returns the BCL <see cref="T:System.DateTimeOffset" /> corresponding to this offset date and time.
            </summary>
      <returns>A DateTimeOffset with the same local date/time and offset as this. The <see cref="T:System.DateTime" /> part of
            the result always has a "kind" of Unspecified.</returns>
    </member>
    <member name="M:NodaTime.OffsetDateTime.ToInstant">
      <summary>
            Converts this offset date and time to an instant in time by subtracting the offset from the local date and time.
            </summary>
      <returns>The instant represented by this offset date and time</returns>
    </member>
    <member name="M:NodaTime.OffsetDateTime.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("G"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.OffsetDateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("G").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.WeekOfWeekYear">
      <summary>Gets the week within the WeekYear. See <see cref="P:NodaTime.OffsetDateTime.WeekYear" /> for more details.</summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.WeekYear">
      <summary>
            Gets the "week year" of this offset date and time.
            </summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.WithCalendar(NodaTime.CalendarSystem)">
      <summary>
            Creates a new OffsetDateTime representing the same physical date, time and offset, but in a different calendar.
            The returned OffsetDateTime is likely to have different date field values to this one.
            For example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.
            </summary>
      <param name="calendarSystem">The calendar system to convert this local date to.</param>
      <returns>The converted OffsetDateTime.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendarSystem" /> is null.</exception>
    </member>
    <member name="M:NodaTime.OffsetDateTime.WithOffset(NodaTime.Offset)">
      <summary>
            Creates a new OffsetDateTime representing the instant in time in the same calendar,
            but with a different offset. The local date and time is adjusted accordingly.
            </summary>
      <param name="offset">The new offset to use.</param>
      <returns>The converted OffsetDateTime.</returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Year">
      <summary>Gets the year of this offset date and time.</summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.YearOfCentury">
      <summary>Gets the year of this offset date and time within the century.</summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.YearOfEra">
      <summary>Gets the year of this offset date and time within the era.</summary>
    </member>
    <member name="T:NodaTime.OffsetDateTime.Comparer">
      <summary>
            Base class for <see cref="T:NodaTime.OffsetDateTime" /> comparers.
            </summary>
    </member>
    <member name="M:NodaTime.OffsetDateTime.Comparer.Compare(NodaTime.OffsetDateTime,NodaTime.OffsetDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.OffsetDateTime" /> values and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
      <param name="x">The first value to compare.</param>
      <param name="y">The second value to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
              <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term>Zero</term><description><paramref name="x" /> is equals to <paramref name="y" />.</description></item><item><term>Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Comparer.Instant">
      <summary>
            Returns a comparer which compares <see cref="T:NodaTime.OffsetDateTime" /> values by the instant values obtained by applying the offset to
            the local date/time, ignoring the calendar system.
            </summary>
    </member>
    <member name="P:NodaTime.OffsetDateTime.Comparer.Local">
      <summary>
            Returns a comparer which compares <see cref="T:NodaTime.OffsetDateTime" /> values by their local date/time, without reference to
            either the offset or the calendar system.
            </summary>
    </member>
    <member name="T:NodaTime.Period">
      <summary>
            Represents a period of time expressed in human chronological terms: hours, days,
            weeks, months and so on.
            </summary>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)">
      <summary>
            Returns the exact difference between two dates.
            </summary>
      <param name="start">Start date</param>
      <param name="end">End date</param>
      <returns>The period between the two dates, using year, month and day units.</returns>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.PeriodUnits)">
      <summary>
            Returns the period between a start and an end date, using only the given units.
            </summary>
      <param name="start">Start date</param>
      <param name="end">End date</param>
      <param name="units">Units to use for calculations</param>
      <returns>The period between the given dates, using the given units.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="units" /> contains time units, is empty or contains unknown values.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> and <paramref name="end" /> use different calendars.</exception>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDateTime,NodaTime.LocalDateTime)">
      <summary>
            Returns the exact difference between two date/times.
            </summary>
      <param name="start">Start date/time</param>
      <param name="end">End date/time</param>
      <returns>The period between the two date and time values, using all units.</returns>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalDateTime,NodaTime.LocalDateTime,NodaTime.PeriodUnits)">
      <summary>
            Returns the period between a start and an end date/time, using only the given units.
            </summary>
      <param name="start">Start date/time</param>
      <param name="end">End date/time</param>
      <param name="units">Units to use for calculations</param>
      <returns>The period between the given date/times, using the given units.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="units" /> is empty or contained unknown values.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> and <paramref name="end" /> use different calendars.</exception>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime)">
      <summary>
            Returns the exact difference between two times.
            </summary>
      <param name="start">Start time</param>
      <param name="end">End time</param>
      <returns>The period between the two times, using the time period units.</returns>
    </member>
    <member name="M:NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.PeriodUnits)">
      <summary>
            Returns the period between a start and an end time, using only the given units.
            </summary>
      <param name="start">Start time</param>
      <param name="end">End time</param>
      <param name="units">Units to use for calculations</param>
      <returns>The period between the given times, using the given units.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="units" /> contains date units, is empty or contains unknown values.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> and <paramref name="end" /> use different calendars.</exception>
    </member>
    <member name="M:NodaTime.Period.CreateComparer(NodaTime.LocalDateTime)">
      <summary>
            Creates an <see cref="T:System.Collections.Generic.IComparer`1" /> for periods, using the given "base" local date/time.
            </summary>
      <param name="baseDateTime">The base local date/time to use for comparisons.</param>
      <returns>The new comparer.</returns>
    </member>
    <member name="P:NodaTime.Period.Days">
      <summary>
            Gets the number of days within this period.
            </summary>
    </member>
    <member name="M:NodaTime.Period.Equals(NodaTime.Period)">
      <summary>
            Compares the given period for equality with this one.
            </summary>
      <param name="other">The period to compare this one with.</param>
      <returns>True if this period has the same values for the same properties as the one specified.</returns>
    </member>
    <member name="M:NodaTime.Period.Equals(System.Object)">
      <summary>
            Compares the given object for equality with this one, as per <see cref="M:NodaTime.Period.Equals(NodaTime.Period)" />.
            </summary>
      <param name="other">The value to compare this one with.</param>
      <returns>true if the other object is a period equal to this one, consistent with <see cref="M:NodaTime.Period.Equals(NodaTime.Period)" /></returns>
    </member>
    <member name="M:NodaTime.Period.FromDays(System.Int64)">
      <summary>
            Creates a period representing the specified number of days.
            </summary>
      <param name="days">The number of days in the new period</param>
      <returns>A period consisting of the given number of days.</returns>
    </member>
    <member name="M:NodaTime.Period.FromHours(System.Int64)">
      <summary>
            Creates a period representing the specified number of hours.
            </summary>
      <param name="hours">The number of hours in the new period</param>
      <returns>A period consisting of the given number of hours.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMilliseconds(System.Int64)">
      <summary>
            Creates a period representing the specified number of milliseconds.
            </summary>
      <param name="milliseconds">The number of milliseconds in the new period</param>
      <returns>A period consisting of the given number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMillseconds(System.Int64)">
      <summary>
            Creates a period representing the specified number of milliseconds.
            </summary>
      <param name="milliseconds">The number of milliseconds in the new period</param>
      <returns>A period consisting of the given number of milliseconds.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMinutes(System.Int64)">
      <summary>
            Creates a period representing the specified number of minutes.
            </summary>
      <param name="minutes">The number of minutes in the new period</param>
      <returns>A period consisting of the given number of minutes.</returns>
    </member>
    <member name="M:NodaTime.Period.FromMonths(System.Int64)">
      <summary>
            Creates a period representing the specified number of months.
            </summary>
      <param name="months">The number of months in the new period</param>
      <returns>A period consisting of the given number of months.</returns>
    </member>
    <member name="M:NodaTime.Period.FromSeconds(System.Int64)">
      <summary>
            Creates a period representing the specified number of seconds.
            </summary>
      <param name="seconds">The number of seconds in the new period</param>
      <returns>A period consisting of the given number of seconds.</returns>
    </member>
    <member name="M:NodaTime.Period.FromTicks(System.Int64)">
      <summary>
            Creates a period representing the specified number of ticks.
            </summary>
      <param name="ticks">The number of ticks in the new period</param>
      <returns>A period consisting of the given number of ticks.</returns>
    </member>
    <member name="M:NodaTime.Period.FromWeeks(System.Int64)">
      <summary>
            Creates a period representing the specified number of weeks.
            </summary>
      <param name="weeks">The number of weeks in the new period</param>
      <returns>A period consisting of the given number of weeks.</returns>
    </member>
    <member name="M:NodaTime.Period.FromYears(System.Int64)">
      <summary>
            Creates a period representing the specified number of years.
            </summary>
      <param name="years">The number of years in the new period</param>
      <returns>A period consisting of the given number of years. (The value returned is never null.)</returns>
    </member>
    <member name="M:NodaTime.Period.GetHashCode">
      <summary>
            Returns the hash code for this period, consistent with <see cref="M:NodaTime.Period.Equals(NodaTime.Period)" />.
            </summary>
      <returns>The hash code for this period.</returns>
    </member>
    <member name="P:NodaTime.Period.HasDateComponent">
      <summary>
            Returns whether or not this period contains any non-zero date-based properties (days or higher).
            </summary>
    </member>
    <member name="P:NodaTime.Period.HasTimeComponent">
      <summary>
            Returns whether or not this period contains any non-zero-valued time-based properties (hours or lower).
            </summary>
    </member>
    <member name="P:NodaTime.Period.Hours">
      <summary>
            Gets the number of hours within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Milliseconds">
      <summary>
            Gets the number of milliseconds within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Minutes">
      <summary>
            Gets the number of minutes within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Months">
      <summary>
            Gets the number of months within this period.
            </summary>
    </member>
    <member name="M:NodaTime.Period.Normalize">
      <summary>
            Returns a normalized version of this period, such that equivalent (but potentially non-equal) periods are
            changed to the same representation.
            </summary>
      <returns>The normalized period.</returns>
      <exception cref="T:System.OverflowException">The period doesn't have years or months, but it contains more than
            <see cref="F:System.Int64.MaxValue" /> ticks when the combined weeks/days/time portions are considered. Such a period
            could never be useful anyway, however.
            In some cases this may occur even though the theoretical result would be valid due to balancing positive and
            negative values, but for simplicity there is no attempt to work around this - in realistic periods, it
            shouldn't be a problem.</exception>
    </member>
    <member name="P:NodaTime.Period.NormalizingEqualityComparer">
      <summary>
            Returns an equality comparer which compares periods by first normalizing them - so 24 hours is deemed equal to 1 day, and so on.
            Note that as per the <see cref="M:NodaTime.Period.Normalize" /> method, years and months are unchanged by normalization - so 12 months does not
            equal 1 year.
            </summary>
    </member>
    <member name="M:NodaTime.Period.op_Addition(NodaTime.Period,NodaTime.Period)">
      <summary>
            Adds two periods together, by simply adding the values for each property.
            </summary>
      <param name="left">The first period to add</param>
      <param name="right">The second period to add</param>
      <returns>The sum of the two periods. The units of the result will be the union of those in both
            periods.</returns>
    </member>
    <member name="M:NodaTime.Period.op_Subtraction(NodaTime.Period,NodaTime.Period)">
      <summary>
            Subtracts one period from another, by simply subtracting each property value.
            </summary>
      <param name="minuend">The period to subtract the second operand from</param>
      <param name="subtrahend">The period to subtract the first operand from</param>
      <returns>The result of subtracting all the values in the second operand from the values in the first. The
            units of the result will be the union of both periods, even if the subtraction caused some properties to
            become zero (so "2 weeks, 1 days" minus "2 weeks" is "zero weeks, 1 days", not "1 days").</returns>
    </member>
    <member name="P:NodaTime.Period.Seconds">
      <summary>
            Gets the number of seconds within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Ticks">
      <summary>
            Gets the number of ticks within this period.
            </summary>
    </member>
    <member name="M:NodaTime.Period.ToBuilder">
      <summary>
            Creates a <see cref="T:NodaTime.PeriodBuilder" /> from this instance. The new builder
            is populated with the values from this period, but is then detached from it:
            changes made to the builder are not reflected in this period.
            </summary>
      <returns>A builder with the same values and units as this period.</returns>
    </member>
    <member name="M:NodaTime.Period.ToDuration">
      <summary>
            For periods that do not contain a non-zero number of years or months, returns a duration for this period
            assuming a standard 7-day week, 24-hour day, 60-minute hour etc.
            </summary>
      <returns>The duration of the period.</returns>
      <exception cref="T:System.InvalidOperationException">The month or year property in the period is non-zero.</exception>
      <exception cref="T:System.OverflowException">The period doesn't have years or months, but the calculation
            overflows the bounds of <see cref="T:NodaTime.Duration" />. In some cases this may occur even though the theoretical
            result would be valid due to balancing positive and negative values, but for simplicity there is
            no attempt to work around this - in realistic periods, it shouldn't be a problem.</exception>
    </member>
    <member name="M:NodaTime.Period.ToString">
      <summary>
            Returns this string formatted according to the <see cref="F:NodaTime.Text.PeriodPattern.RoundtripPattern" />.
            </summary>
      <returns>A formatted representation of this period.</returns>
    </member>
    <member name="P:NodaTime.Period.Weeks">
      <summary>
            Gets the number of weeks within this period.
            </summary>
    </member>
    <member name="P:NodaTime.Period.Years">
      <summary>
            Gets the number of years within this period.
            </summary>
    </member>
    <member name="F:NodaTime.Period.Zero">
      <summary>
            A period containing only zero-valued properties.
            </summary>
    </member>
    <member name="T:NodaTime.PeriodBuilder">
      <summary>
            A mutable builder class for <see cref="T:NodaTime.Period" /> values. Each property can
            be set independently, and then a Period can be created from the result
            using the <see cref="M:NodaTime.PeriodBuilder.Build" /> method.
            </summary>
    </member>
    <member name="M:NodaTime.PeriodBuilder.#ctor">
      <summary>
            Creates a new period builder with an initially zero period.
            </summary>
    </member>
    <member name="M:NodaTime.PeriodBuilder.#ctor(NodaTime.Period)">
      <summary>
            Creates a new period builder with the values from an existing
            period. Calling this constructor instead of <see cref="M:NodaTime.Period.ToBuilder" />
            allows object initializers to be used.
            </summary>
      <param name="period">An existing period to copy values from.</param>
    </member>
    <member name="M:NodaTime.PeriodBuilder.Build">
      <summary>
            Builds a period from the properties in this builder.
            </summary>
      <returns>A period containing the values from this builder.</returns>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Days">
      <summary>
            Gets or sets the number of days within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Hours">
      <summary>
            Gets or sets the number of hours within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Item(NodaTime.PeriodUnits)">
      <summary>
            Gets or sets the value of a single unit.
            </summary>
      <param name="unit">A single value within the <see cref="T:NodaTime.PeriodUnits" /> enumeration.</param>
      <returns>The value of the given unit within this period builder, or zero if the unit is unset.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="unit" /> is not a single unit.</exception>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Milliseconds">
      <summary>
            Gets or sets the number of milliseconds within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Minutes">
      <summary>
            Gets or sets the number of minutes within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Months">
      <summary>
            Gets or sets the number of months within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Seconds">
      <summary>
            Gets or sets the number of seconds within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Ticks">
      <summary>
            Gets or sets the number of ticks within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Weeks">
      <summary>
            Gets or sets the number of weeks within the period.
            </summary>
    </member>
    <member name="P:NodaTime.PeriodBuilder.Years">
      <summary>
            Gets or sets the number of years within the period.
            </summary>
    </member>
    <member name="T:NodaTime.PeriodUnits">
      <summary>
            The units within a <see cref="T:NodaTime.Period" />. When a period is created to find the difference between two local values,
            the caller may specify which units are required - for example, you can ask for the difference between two dates
            in "years and weeks". Units are always applied largest-first in arithmetic.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.None">
      <summary>
            Value indicating no units - an empty period.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Years">
      <summary>
            Years element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Months">
      <summary>
            Months element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Weeks">
      <summary>
            Weeks element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Days">
      <summary>
            Days element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.AllDateUnits">
      <summary>
            Compound value representing the combination of <see cref="F:NodaTime.PeriodUnits.Years" />, <see cref="F:NodaTime.PeriodUnits.Months" />, <see cref="F:NodaTime.PeriodUnits.Weeks" /> and <see cref="F:NodaTime.PeriodUnits.Days" />.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.YearMonthDay">
      <summary>
            Compound value representing the combination of <see cref="F:NodaTime.PeriodUnits.Years" />, <see cref="F:NodaTime.PeriodUnits.Months" /> and <see cref="F:NodaTime.PeriodUnits.Days" />.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Hours">
      <summary>
            Hours element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Minutes">
      <summary>
            Minutes element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Seconds">
      <summary>
            Seconds element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Milliseconds">
      <summary>
            Milliseconds element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.Ticks">
      <summary>
            Tick element within a <see cref="T:NodaTime.Period" /></summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.HourMinuteSecond">
      <summary>
            Compound value representing the combination of <see cref="F:NodaTime.PeriodUnits.Hours" />, <see cref="F:NodaTime.PeriodUnits.Minutes" /> and <see cref="F:NodaTime.PeriodUnits.Seconds" />.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.AllTimeUnits">
      <summary>
            Compound value representing the combination of all time elements.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.DateAndTime">
      <summary>
            Compound value representing the combination of all possible elements except weeks.
            </summary>
    </member>
    <member name="F:NodaTime.PeriodUnits.AllUnits">
      <summary>
            Compound value representing the combination of all possible elements.
            </summary>
    </member>
    <member name="T:NodaTime.SkippedTimeException">
      <summary>
            Exception thrown to indicate that the specified local time doesn't
            exist in a particular time zone due to daylight saving time changes.    
            </summary>
    </member>
    <member name="M:NodaTime.SkippedTimeException.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone)">
      <summary>
            Creates a new instance for the given local date/time and time zone.
            </summary>
      <param name="localDateTime">The local date/time which is skipped in the specified time zone.</param>
      <param name="zone">The time zone in which the local date/time does not exist.</param>
    </member>
    <member name="P:NodaTime.SkippedTimeException.LocalDateTime">
      <summary>
            The local date/time which is invalid in the time zone
            </summary>
    </member>
    <member name="P:NodaTime.SkippedTimeException.Zone">
      <summary>
            The time zone in which the local date/time is invalid
            </summary>
    </member>
    <member name="T:NodaTime.SystemClock">
      <summary>
            Singleton implementation of <see cref="T:NodaTime.IClock" /> which reads the current system time.
            It is recommended that for anything other than throwaway code, this is only referenced
            in a single place in your code: where you provide a value to inject into the rest of
            your application, which should only depend on the interface.
            </summary>
    </member>
    <member name="F:NodaTime.SystemClock.Instance">
      <summary>
            The singleton instance of <see cref="T:NodaTime.SystemClock" />.
            </summary>
    </member>
    <member name="P:NodaTime.SystemClock.Now">
      <summary>
            Gets the current time as an <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="T:NodaTime.ZonedDateTime">
      <summary>
            A <see cref="T:NodaTime.LocalDateTime" /> in a specific time zone and with a particular offset to distinguish
            between otherwise-ambiguous instants. A <see cref="T:NodaTime.ZonedDateTime" /> is global, in that it maps to a single
            <see cref="T:NodaTime.Instant" />.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.ZonedDateTime" /> struct in the specified time zone
            and the ISO calendar.
            </summary>
      <param name="instant">The instant.</param>
      <param name="zone">The time zone.</param>
    </member>
    <member name="M:NodaTime.ZonedDateTime.#ctor(NodaTime.Instant,NodaTime.DateTimeZone,NodaTime.CalendarSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.ZonedDateTime" /> struct.
            </summary>
      <param name="instant">The instant.</param>
      <param name="zone">The time zone.</param>
      <param name="calendar">The calendar system.</param>
    </member>
    <member name="M:NodaTime.ZonedDateTime.#ctor(NodaTime.LocalDateTime,NodaTime.DateTimeZone,NodaTime.Offset)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.ZonedDateTime" /> struct in the specified time zone
            from a given local time and offset. The offset is validated to be correct as part of initialization.
            In most cases a local time can only map to a single instant anyway, but the offset is included here for cases
            where the local time is ambiguous, usually due to daylight saving transitions.
            </summary>
      <param name="localDateTime">The local date and time.</param>
      <param name="zone">The time zone.</param>
      <param name="offset">The offset between UTC and local time at the desired instant.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> is not a valid offset at the given
            local date and time.</exception>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Add(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Adds a duration to a zoned date and time. Friendly alternative to <c>operator+()</c>.
            </summary>
      <param name="zonedDateTime">The value to add the duration to.</param>
      <param name="duration">The duration to add</param>
      <returns>A new value with the time advanced by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Calendar">
      <summary>Gets the calendar system associated with this zoned date and time.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.CenturyOfEra">
      <summary>Gets the century within the era of this zoned date and time.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.ClockHourOfHalfDay">
      <summary>
            Gets the hour of the half-day of this zoned date and time, in the range 1 to 12 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.CompareTo(NodaTime.ZonedDateTime)">
      <summary>
            Indicates whether this date/time is earlier, later or the same as another one.
            </summary>
      <param name="other">The other zoned date/time to compare this one with</param>
      <returns>A value less than zero if the instant represented by this zoned date/time is earlier than the one in
            <paramref name="other" />; zero if the instant is the same as the one in <paramref name="other" />;
            a value greater than zero if the instant is later than the one in <paramref name="other" />.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Date">
      <summary>
            Gets the local date represented by this zoned date and time. The returned <see cref="T:NodaTime.LocalDate" />
            will have the same calendar system and return the same values for each of the date-based calendar
            properties (Year, MonthOfYear and so on), but will not be associated with any particular time zone.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Day">
      <summary>
            Gets the day of this zoned date and time within the month.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.DayOfWeek">
      <summary>
            Gets the week day of this zoned date and time as a number.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.DayOfYear">
      <summary>Gets the day of this zoned date and time within the year.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Era">
      <summary>Gets the era for this zoned date and time.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.FromDateTimeOffset(System.DateTimeOffset)">
      <summary>
            Returns a new <see cref="T:NodaTime.ZonedDateTime" /> representing the same instant in time as the given
            <see cref="T:System.DateTimeOffset" />.
            The time zone used will be a fixed time zone, which uses the same offset throughout time.
            </summary>
      <param name="dateTimeOffset">Date and time value with an offset.</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> value representing the same instant in time as the given <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.GetHashCode">
      <summary>
            Computes the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.GetZoneInterval">
      <summary>
            Returns the <see cref="T:NodaTime.TimeZones.ZoneInterval" /> containing this value, in the time zone this
            value refers to.
            </summary>
      <returns>The <c>ZoneInterval</c> containing this value.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Hour">
      <summary>
            Gets the hour of day of this zoned date and time, in the range 0 to 23 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.IsDaylightSavingTime">
      <summary>
            Indicates whether or not this <see cref="T:NodaTime.ZonedDateTime" /> is in daylight saving time
            for its time zone. This is determined by checking the <see cref="P:NodaTime.TimeZones.ZoneInterval.Savings" /> property
            of the zone interval containing this value.
            </summary>
      <returns>
        <c>true</c> if the zone interval containing this value has a non-zero savings
            component; <c>false</c> otherwise.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.IsoDayOfWeek">
      <summary>
            Gets the week day of this zoned date and time expressed as an <see cref="T:NodaTime.IsoDayOfWeek" /> value,
            for calendars which use ISO days of the week.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying calendar doesn't use ISO days of the week.</exception>
    </member>
    <member name="P:NodaTime.ZonedDateTime.LocalDateTime">
      <summary>
            Gets the local date and time represented by this zoned date and time. The returned
            <see cref="T:NodaTime.LocalDateTime" /> will have the same calendar system and return the same values for
            each of the calendar properties (Year, MonthOfYear and so on), but will not be associated with any
            particular time zone.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Millisecond">
      <summary>
            Gets the millisecond of this zoned date and time within the second, in the range 0 to 999 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Minus(NodaTime.Duration)">
      <summary>
            Returns the result of subtracting a duration from this zoned date and time, for a fluent alternative to <c>operator-()</c>.
            </summary>
      <param name="duration">The duration to subtract</param>
      <returns>A new <see cref="T:NodaTime.ZonedDateTime" /> representing the result of the subtraction.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Minute">
      <summary>
            Gets the minute of this zoned date and time, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Month">
      <summary>Gets the month of this zoned date and time within the year.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Offset">
      <summary>Gets the offset of the local representation of this value from UTC.</summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Addition(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Returns a new <see cref="T:NodaTime.ZonedDateTime" /> with the time advanced by the given duration. Note that
            due to daylight saving time changes this may not advance the local time by the same amount.
            </summary>
      <param name="zonedDateTime">The <see cref="T:NodaTime.ZonedDateTime" /> to add the duration to.</param>
      <param name="duration">The duration to add.</param>
      <returns>A new value with the time advanced by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Equality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The first value to compare</param>
      <param name="right">The second value to compare</param>
      <returns>True if the two operands are equal according to <see cref="M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)" />; false otherwise</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_GreaterThan(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.ZonedDateTime" /> values to see if the left one is strictly later than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly later than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_GreaterThanOrEqual(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.ZonedDateTime" /> values to see if the left one is later than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is later than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Inequality(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The first value to compare</param>
      <param name="right">The second value to compare</param>
      <returns>False if the two operands are equal according to <see cref="M:NodaTime.ZonedDateTime.Equals(NodaTime.ZonedDateTime)" />; true otherwise</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_LessThan(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.ZonedDateTime" /> values to see if the left one is strictly earlier than the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is strictly earlier than <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_LessThanOrEqual(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.ZonedDateTime" /> values to see if the left one is earlier than or equal to the right
            one.
            </summary>
      <param name="lhs">First operand of the comparison</param>
      <param name="rhs">Second operand of the comparison</param>
      <returns>true if the <paramref name="lhs" /> is earlier than or equal to <paramref name="rhs" />, false otherwise.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.op_Subtraction(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Returns a new ZonedDateTime with the duration subtracted. Note that
            due to daylight saving time changes this may not change the local time by the same amount.
            </summary>
      <param name="zonedDateTime">The value to subtract the duration from.</param>
      <param name="duration">The duration to subtract.</param>
      <returns>A new value with the time "rewound" by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Plus(NodaTime.Duration)">
      <summary>
            Returns the result of adding a duration to this zoned date and time, for a fluent alternative to <c>operator+()</c>.
            </summary>
      <param name="duration">The duration to add</param>
      <returns>A new <see cref="T:NodaTime.ZonedDateTime" /> representing the result of the addition.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Second">
      <summary>
            Gets the second of this zoned date and time within the minute, in the range 0 to 59 inclusive.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Subtract(NodaTime.ZonedDateTime,NodaTime.Duration)">
      <summary>
            Subtracts a duration from a zoned date and time. Friendly alternative to <c>operator-()</c>.
            </summary>
      <param name="zonedDateTime">The value to subtract the duration from.</param>
      <param name="duration">The duration to subtract.</param>
      <returns>A new value with the time "rewound" by the given duration, in the same calendar system and time zone.</returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.TickOfDay">
      <summary>
            Gets the tick of this zoned date and time within the day, in the range 0 to 863,999,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.TickOfSecond">
      <summary>
            Gets the tick of this zoned date and time within the second, in the range 0 to 9,999,999 inclusive.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.TimeOfDay">
      <summary>
            Gets the time portion of this zoned date and time. The returned <see cref="T:NodaTime.LocalTime" /> will
            return the same values for each of the time-based properties (Hour, Minute and so on), but
            will not be associated with any particular time zone.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToDateTimeOffset">
      <summary>
            Constructs a <see cref="T:System.DateTimeOffset" /> value with the same local time and offset from
            UTC as this value.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> representation of this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToDateTimeUnspecified">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this <see cref="T:NodaTime.ZonedDateTime" /> which has a
            <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Unspecified" /> and represents the same local time as
            this value rather than the same instant in time.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representation of this value with an "unspecified" kind, with the same
            local date and time as this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToDateTimeUtc">
      <summary>
            Constructs a <see cref="T:System.DateTime" /> from this <see cref="T:NodaTime.ZonedDateTime" /> which has a
            <see cref="P:System.DateTime.Kind" /> of <see cref="F:System.DateTimeKind.Utc" /> and represents the same instant of time as
            this value rather than the same local time.
            </summary>
      <returns>A <see cref="T:System.DateTime" /> representation of this value with a "universal" kind, with the same
            instant of time as this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToInstant">
      <summary>
            Converts this value to the instant it represents on the time line.
            </summary>
      <returns>The instant corresponding to this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToOffsetDateTime">
      <summary>
            Constructs an <see cref="T:NodaTime.OffsetDateTime" /> with the same local date and time, and the same offset
            as this zoned date and time, effectively just "removing" the time zone itself.
            </summary>
      <returns>An OffsetDateTime with the same local date/time and offset as this value.</returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            The value of the current instance in the default format pattern ("G"), using the current thread's
            culture to obtain a format provider.
            </returns>
    </member>
    <member name="M:NodaTime.ZonedDateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified pattern.
            </summary>
      <param name="patternText">The <see cref="T:System.String" /> specifying the pattern to use,
            or null to use the default format pattern ("G").
            </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
            </param>
      <returns>
            A <see cref="T:System.String" /> containing the value of the current instance in the specified format.
            </returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.WeekOfWeekYear">
      <summary>Gets the week within the WeekYear. See <see cref="P:NodaTime.ZonedDateTime.WeekYear" /> for more details.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.WeekYear">
      <summary>
            Gets the "week year" of this date and time.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.WithZone(NodaTime.DateTimeZone)">
      <summary>
            Creates a new <see cref="T:NodaTime.ZonedDateTime" /> representing the same instant in time, in the
            same calendar but a different time zone.
            </summary>
      <param name="targetZone">The target time zone to convert to.</param>
      <returns>A new value in the target time zone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetZone" /> is null.</exception>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Year">
      <summary>Gets the year of this zoned date and time.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.YearOfCentury">
      <summary>Gets the year of this zoned date and time within its century.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.YearOfEra">
      <summary>Gets the year of this zoned date and time within its era.</summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Zone">
      <summary>Gets the time zone associated with this value.</summary>
    </member>
    <member name="T:NodaTime.ZonedDateTime.Comparer">
      <summary>
            Base class for <see cref="T:NodaTime.ZonedDateTime" /> comparers.
            </summary>
    </member>
    <member name="M:NodaTime.ZonedDateTime.Comparer.Compare(NodaTime.ZonedDateTime,NodaTime.ZonedDateTime)">
      <summary>
            Compares two <see cref="T:NodaTime.ZonedDateTime" /> values and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
      <param name="x">The first value to compare.</param>
      <param name="y">The second value to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
              <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term>Zero</term><description><paramref name="x" /> is equals to <paramref name="y" />.</description></item><item><term>Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Comparer.Instant">
      <summary>
            Returns a comparer which compares <see cref="T:NodaTime.ZonedDateTime" /> values by the instants obtained by applying the offset to
            the local date/time, ignoring the calendar system.
            </summary>
    </member>
    <member name="P:NodaTime.ZonedDateTime.Comparer.Local">
      <summary>
            Returns a comparer which compares <see cref="T:NodaTime.ZonedDateTime" /> values by their local date/time, without reference to
            the time zone, offset or the calendar system.
            </summary>
    </member>
    <member name="T:NodaTime.Calendars.Era">
      <summary>
            Represents an era used in a calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoHegirae">
      <summary>
            The "Anno Hegira" era. This is the sole era used in the Hijri (Islamic) calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoMartyrm">
      <summary>
            The "Anno Martyrum" or "Era of the Martyrs". This is the sole era used in the Coptic calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoMartyrum">
      <summary>
            The "Anno Martyrum" or "Era of the Martyrs". This is the sole era used in the Coptic calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoMundi">
      <summary>
            The "Anno Mundi" era. This is the sole era used in the Hebrew calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.AnnoPersico">
      <summary>
            The "Anno Persico" era. This is the sole era used in the Persian calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.BeforeCommon">
      <summary>
            The "before common" era (BCE), also known as Before Christ (BC). This is used in the ISO, Gregorian and Julian calendars.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.Era.Common">
      <summary>
            The "Common" era (CE), also known as Anno Domini (AD). This is used in the ISO, Gregorian and Julian calendars.
            </summary>
    </member>
    <member name="P:NodaTime.Calendars.Era.Name">
      <summary>
            Returns the name of this era, e.g. "CE" or "BCE".
            </summary>
    </member>
    <member name="M:NodaTime.Calendars.Era.ToString">
      <summary>
            Returns the name of this era.
            </summary>
      <returns>The name of this era.</returns>
    </member>
    <member name="T:NodaTime.Calendars.HebrewMonthNumbering">
      <summary>
            The month numbering to use for the Hebrew calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.HebrewMonthNumbering.Civil">
      <summary>
        <para>
            The numbering system where month 1 is Tishri. This has the advantage of familiarity with other
            calendars where the first month is 1; it is easier to tell which date comes before which, aside
            from anything else. It is also the  numbering system used by the BCL.
            </para>
        <para>The main disadvantage is that due to leap years effectively "splitting" Adar into Adar I
            and Adar II, the months after that (Nisan, Iyyar and so on) have month numberings which depend
            on the year.</para>
      </summary>
    </member>
    <member name="F:NodaTime.Calendars.HebrewMonthNumbering.Scriptural">
      <summary>
        <para>
            The numbering system where month 1 is Nisan. This is the numbering system which matches biblical
            custom (such as Leviticus 23:5). This has the advantage that the split of Adar is at the end of the
            numbering system, so all other month names are stable.
            </para>
        <para>The primary disadvantage of this numbering system is that months 1-6 come after months 7-12 (or 13),
            which is counter-intuitive.</para>
      </summary>
    </member>
    <member name="T:NodaTime.Calendars.IslamicEpoch">
      <summary>
            The epoch to use when constructing an Islamic calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicEpoch.Astronomical">
      <summary>
            Epoch beginning on July 15th 622CE (Julian), which is July 18th 622 CE in the Gregorian calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicEpoch.Civil">
      <summary>
            Epoch beginning on July 16th 622CE (Julian), which is July 19th 622 CE in the Gregorian calendar.
            </summary>
    </member>
    <member name="T:NodaTime.Calendars.IslamicLeapYearPattern">
      <summary>
            The pattern of leap years to use when constructing an Islamic calendar.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.Base15">
      <summary>
            A pattern of leap years in 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 and 29.
            This pattern and <see cref="F:NodaTime.Calendars.IslamicLeapYearPattern.Base16" /> are the most commonly used ones,
            and only differ in whether the 15th or 16th year is deemed leap.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.Base16">
      <summary>
            A pattern of leap years in 2, 5, 7, 10, 13, 16, 18, 21, 24, 26 and 29.
            This pattern and <see cref="F:NodaTime.Calendars.IslamicLeapYearPattern.Base15" /> are the most commonly used ones,
            and only differ in whether the 15th or 16th year is deemed leap.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.Indian">
      <summary>
            A pattern of leap years in 2, 5, 8, 10, 13, 16, 19, 21, 24, 27 and 29.
            </summary>
    </member>
    <member name="F:NodaTime.Calendars.IslamicLeapYearPattern.HabashAlHasib">
      <summary>
            A pattern of leap years in 2, 5, 8, 11, 13, 16, 19, 21, 24, 27 and 30.
            </summary>
    </member>
    <member name="T:NodaTime.Text.DurationPattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.Duration" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.DurationPattern.Create(System.String,System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the given pattern text and culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.DurationPattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.DurationPattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.DurationPattern.Format(NodaTime.Duration)">
      <summary>
            Formats the given duration as text according to the rules of this pattern.
            </summary>
      <param name="value">The duration to format.</param>
      <returns>The duration formatted according to this pattern.</returns>
    </member>
    <member name="M:NodaTime.Text.DurationPattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.DurationPattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.DurationPattern.RoundtripPattern">
      <summary>
            General pattern for durations using the invariant culture, with a format string of "-D:hh:mm:ss.FFFFFFF".
            This pattern round-trips.
            </summary>
    </member>
    <member name="M:NodaTime.Text.DurationPattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="T:NodaTime.Text.InstantPattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.Instant" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.Create(System.String,System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the given pattern text and culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <returns>A pattern for parsing and formatting instants.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.CreateNumericPattern(System.Globalization.CultureInfo,System.Boolean)">
      <summary>
            Creates a "numeric" pattern for the given culture. The numeric format gives the
            number of ticks in decimal format, with or without thousands separators.
            </summary>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <param name="includeThousandsSeparators">True to include thousands separators when parsing or formatting; false to omit them.</param>
      <returns>A numeric pattern for the configuration</returns>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting instants.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture, using the default
            min/max labels.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting instants.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="P:NodaTime.Text.InstantPattern.ExtendedIsoPattern">
      <summary>
            Returns an invariant instant pattern which is ISO-8601 compatible, providing up to 7 decimal places
            of sub-second accuracy. (These digits are omitted when unnecessary.)
            This corresponds to the text pattern "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFF'Z'".
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.Format(NodaTime.Instant)">
      <summary>
            Formats the given instant as text according to the rules of this pattern.
            </summary>
      <param name="value">The instant to format.</param>
      <returns>The instant formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.InstantPattern.GeneralPattern">
      <summary>
            Returns the general pattern, which always uses an invariant culture. The general pattern represents
            an instant as a UTC date/time in ISO-8601 style "yyyy-MM-ddTHH:mm:ss'Z'".
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.InstantPattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="M:NodaTime.Text.InstantPattern.WithMinMaxLabels(System.String,System.String)">
      <summary>
            Creates a new pattern for the same original pattern text and culture as this pattern, but
            with the given min/max labels.
            </summary>
      <param name="minLabel">Text to use for <see cref="F:NodaTime.Instant.MinValue" />. Must be non-empty, and not the same as <paramref name="maxLabel" />.</param>
      <param name="maxLabel">Text to use for <see cref="F:NodaTime.Instant.MaxValue" />. Must be non-empty, and not the same as <paramref name="minLabel" /></param>
      <returns>A new pattern with the given min/max labels.</returns>
      <exception cref="T:System.ArgumentException"></exception>
    </member>
    <member name="T:NodaTime.Text.InvalidPatternException">
      <summary>
            Exception thrown to indicate that the format pattern provided for either formatting or parsing is invalid.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InvalidPatternException.#ctor">
      <summary>
            Creates a new InvalidPatternException with no message.
            </summary>
    </member>
    <member name="M:NodaTime.Text.InvalidPatternException.#ctor(System.String)">
      <summary>
            Creates a new InvalidPatternException with the given message.
            </summary>
      <param name="message">A message describing the nature of the failure</param>
    </member>
    <member name="T:NodaTime.Text.IPattern`1">
      <summary>
            Generic interface supporting parsing and formatting. Parsing always results in a 
            <see cref="T:NodaTime.Text.ParseResult`1" /> which can represent success or failure.
            </summary>
      <typeparam name="T">Type of value to parse or format.</typeparam>
    </member>
    <member name="M:NodaTime.Text.IPattern`1.Format(`0)">
      <summary>
            Formats the given value as text according to the rules of this pattern.
            </summary>
      <param name="value">The value to format.</param>
      <returns>The value formatted according to this pattern.</returns>
    </member>
    <member name="M:NodaTime.Text.IPattern`1.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="T:NodaTime.Text.LocalDatePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.LocalDate" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Create(System.String,System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the given pattern text and culture, with a template value of 2000-01-01.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <returns>A pattern for parsing and formatting local dates.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalDate)">
      <summary>
            Creates a pattern for the given pattern text, culture, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local dates.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local dates.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local dates.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Format(NodaTime.LocalDate)">
      <summary>
            Formats the given local date as text according to the rules of this pattern.
            </summary>
      <param name="value">The local date to format.</param>
      <returns>The local date formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDatePattern.IsoPattern">
      <summary>
            Returns an invariant local date pattern which is ISO-8601 compatible.
            This corresponds to the text pattern "yyyy'-'MM'-'dd".
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDatePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalDatePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalDatePattern.WithTemplateValue(NodaTime.LocalDate)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.LocalDateTimePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.LocalDateTime" /> values.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.BclRoundtripPattern">
      <summary>
            Returns an invariant local date/time pattern which is ISO-8601 compatible, providing up to 7 decimal places
            of sub-second accuracy which are always present (including trailing zeroes). This is compatible with the
            BCL round-trip formatting of <see cref="T:System.DateTime" /> values with a kind of "unspecified".
            This corresponds to the text pattern "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffff".
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Create(System.String,System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the given pattern text and culture, with a template value of midnight on 2000-01-01.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalDateTime)">
      <summary>
            Creates a pattern for the given pattern text, culture, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.ExtendedIsoPattern">
      <summary>
            Returns an invariant local date/time pattern which is ISO-8601 compatible, providing up to 7 decimal places
            of sub-second accuracy. (These digits are omitted when unnecessary.)
            This corresponds to the text pattern "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFF".
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Format(NodaTime.LocalDateTime)">
      <summary>
            Formats the given local date/time as text according to the rules of this pattern.
            </summary>
      <param name="value">The local date/time to format.</param>
      <returns>The local date/time formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.FullRoundtripPattern">
      <summary>
            Returns an invariant local date/time pattern which round trips values including the calendar system.
            This corresponds to the text pattern "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffff '('c')'".
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.GeneralIsoPattern">
      <summary>
            Returns an invariant local date/time pattern which is ISO-8601 compatible, down to the second.
            This corresponds to the text pattern "yyyy'-'MM'-'dd'T'HH':'mm':'ss", and is also used as the "sortable"
            standard pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalDateTimePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalDateTimePattern.WithTemplateValue(NodaTime.LocalDateTime)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.LocalTimePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.LocalTime" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the given pattern text and culture, with a template value of midnight.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.LocalTime)">
      <summary>
            Creates a pattern for the given pattern text, culture, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="P:NodaTime.Text.LocalTimePattern.ExtendedIsoPattern">
      <summary>
            Returns an invariant local time pattern which is ISO-8601 compatible, providing up to 7 decimal places.
            (These digits are omitted when unnecessary.)
            This corresponds to the text pattern "HH':'mm':'ss;FFFFFFF".
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Format(NodaTime.LocalTime)">
      <summary>
            Formats the given local time as text according to the rules of this pattern.
            </summary>
      <param name="value">The local time to format.</param>
      <returns>The local time formatted according to this pattern.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.LocalTimePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.LocalTimePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="M:NodaTime.Text.LocalTimePattern.WithTemplateValue(NodaTime.LocalTime)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.OffsetDateTimePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.OffsetDateTime" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.OffsetDateTime)">
      <summary>
            Creates a pattern for the given pattern text, culture, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current culture, using the default
            template value of midnight January 1st 2000 at an offset of 0.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture, using the default
            template value of midnight January 1st 2000 at an offset of 0.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting local date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="P:NodaTime.Text.OffsetDateTimePattern.ExtendedIsoPattern">
      <summary>
            Returns an invariant offset date/time pattern based on ISO-8601 (down to the tick), including offset from UTC.
            The calendar system is not parsed or formatted as part of this pattern. It corresponds to a custom pattern of
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFFo&lt;G&gt;". This will round-trip any values
            in the ISO calendar, and is available as the "o" standard pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.Format(NodaTime.OffsetDateTime)">
      <summary>
            Formats the given zoned date/time as text according to the rules of this pattern.
            </summary>
      <param name="value">The zoned date/time to format.</param>
      <returns>The zoned date/time formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.OffsetDateTimePattern.FullRoundtripPattern">
      <summary>
            Returns an invariant offset date/time pattern based on ISO-8601 (down to the tick)
            including offset from UTC and calendar ID. It corresponds to a custom pattern of
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFFo&lt;G&gt; '('c')'". This will round-trip any value in any calendar,
            and is available as the "r" standard pattern.
            </summary>
    </member>
    <member name="P:NodaTime.Text.OffsetDateTimePattern.GeneralIsoPattern">
      <summary>
            Returns an invariant offset date/time pattern based on ISO-8601 (down to the second), including offset from UTC.
            The calendar system is not parsed or formatted as part of this pattern. It corresponds to a custom pattern of
            "yyyy'-'MM'-'dd'T'HH':'mm':'sso&lt;G&gt;". This pattern is available as the "G"
            standard pattern (even though it is invariant).
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.OffsetDateTimePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.OffsetDateTimePattern.Rfc3339Pattern">
      <summary>
            Returns an invariant offset date/time pattern based on RFC 3339 (down to the tick), including offset from UTC
            as hours and minutes only. The minutes part of the offset is always included, but any sub-minute component
            of the offset is lost. An offset of zero is formatted as 'Z', but all of 'Z', '+00:00' and '-00:00' are parsed
            the same way. The RFC 3339 meaning of '-00:00' is not supported by Noda Time.
            Note that parsing is case-sensitive (so 'T' and 'Z' must be upper case).
            The calendar system is not parsed or formatted as part of this pattern. It corresponds to a custom pattern of
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFFo&lt;Z+HH:mm&gt;".
            </summary>
    </member>
    <member name="P:NodaTime.Text.OffsetDateTimePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.WithPatternText(System.String)">
      <summary>
            Creates a pattern for the same original localization information as this pattern, but with the specified
            pattern text.
            </summary>
      <param name="newPatternText">The pattern text to use in the new pattern.</param>
      <returns>A new pattern with the given pattern text.</returns>
    </member>
    <member name="M:NodaTime.Text.OffsetDateTimePattern.WithTemplateValue(NodaTime.OffsetDateTime)">
      <summary>
            Creates a pattern for the same original pattern text and culture as this pattern, but with
            the specified template value.
            </summary>
      <param name="newTemplateValue">The template value to use in the new pattern.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="T:NodaTime.Text.OffsetPattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.Offset" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.Create(System.String,System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the given pattern text and culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.CreateWithCurrentCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the current thread's current culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.CreateWithInvariantCulture(System.String)">
      <summary>
            Creates a pattern for the given pattern text in the invariant culture.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <returns>A pattern for parsing and formatting offsets.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.Format(NodaTime.Offset)">
      <summary>
            Formats the given offset as text according to the rules of this pattern.
            </summary>
      <param name="value">The offset to format.</param>
      <returns>The offset formatted according to this pattern.</returns>
    </member>
    <member name="F:NodaTime.Text.OffsetPattern.GeneralInvariantPattern">
      <summary>
            The "general" offset pattern (e.g. +HH, +HH:mm, +HH:mm:ss, +HH:mm:ss.fff) for the invariant culture.
            </summary>
    </member>
    <member name="F:NodaTime.Text.OffsetPattern.GeneralInvariantPatternWithZ">
      <summary>
            The "general" offset pattern (e.g. +HH, +HH:mm, +HH:mm:ss, +HH:mm:ss.fff) for the invariant culture,
            but producing (and allowing) Z as a value for a zero offset.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.OffsetPattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="M:NodaTime.Text.OffsetPattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="T:NodaTime.Text.ParseResult`1">
      <summary>
            The result of a parse operation.
            </summary>
      <typeparam name="T">The type which was parsed, such as a <see cref="T:NodaTime.LocalDateTime" />.</typeparam>
    </member>
    <member name="P:NodaTime.Text.ParseResult`1.Exception">
      <summary>
            Returns an exception indicating the cause of the parse failure.
            </summary>
      <returns>The exception indicating the cause of the parse failure.</returns>
      <exception cref="T:System.InvalidOperationException">The parse operation succeeded.</exception>
    </member>
    <member name="M:NodaTime.Text.ParseResult`1.GetValueOrThrow">
      <summary>
            Returns the value from the parse operation if it was successful, or throws an exception indicating the parse failure
            otherwise.
            </summary>
      <returns>The result of the parsing operation if it was successful.</returns>
    </member>
    <member name="P:NodaTime.Text.ParseResult`1.Success">
      <summary>
            Indicates whether the parse operation was successful.
            </summary>
    </member>
    <member name="M:NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)">
      <summary>
            Returns the success value, and sets the out parameter to either
            the specified failure value of T or the successful parse result value.
            </summary>
      <param name="failureValue">The "default" value to set in <paramref name="result" /> if parsing failed.</param>
      <param name="result">The parameter to store the parsed value in on success.</param>
      <returns>True if this parse result was successful, or false otherwise.</returns>
    </member>
    <member name="P:NodaTime.Text.ParseResult`1.Value">
      <summary>
            Returns the value from the parse operation if it was successful, or throws an exception indicating the parse failure
            otherwise.
            </summary>
      <returns>The result of the parsing operation if it was successful.</returns>
    </member>
    <member name="T:NodaTime.Text.PeriodPattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.Period" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.PeriodPattern.Format(NodaTime.Period)">
      <summary>
            Formats the given period as text according to the rules of this pattern.
            </summary>
      <param name="value">The period to format.</param>
      <returns>The period formatted according to this pattern.</returns>
    </member>
    <member name="F:NodaTime.Text.PeriodPattern.NormalizingIsoPattern">
      <summary>
            A "normalizing" pattern which abides by the ISO-8601 duration format as far as possible.
            Weeks are added to the number of days (after multiplying by 7). Time units are normalized
            (extending into days where necessary), and fractions of seconds are represented within the
            seconds part. Unlike ISO-8601, which pattern allows for negative values within a period.
            </summary>
    </member>
    <member name="M:NodaTime.Text.PeriodPattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="F:NodaTime.Text.PeriodPattern.RoundtripPattern">
      <summary>
            Pattern which uses the normal ISO format for all the supported ISO
            fields, but extends the time part with "s" for milliseconds and "t" for ticks.
            No normalization is carried out, and a period may contain weeks as well as years, months and days.
            Each element may also be negative, independently of other elements. This pattern round-trips its
            values: a parse/format cycle will produce an identical period, including units.
            </summary>
    </member>
    <member name="T:NodaTime.Text.UnparsableValueException">
      <summary>
            Exception thrown to indicate that the specified value could not be parsed.
            </summary>
    </member>
    <member name="M:NodaTime.Text.UnparsableValueException.#ctor">
      <summary>
            Creates a new UnparsableValueException with no message.
            </summary>
    </member>
    <member name="M:NodaTime.Text.UnparsableValueException.#ctor(System.String)">
      <summary>
            Creates a new UnparsableValueException with the given message.
            </summary>
      <param name="message">The failure message</param>
    </member>
    <member name="T:NodaTime.Text.ZonedDateTimePattern">
      <summary>
            Represents a pattern for parsing and formatting <see cref="T:NodaTime.ZonedDateTime" /> values.
            </summary>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.TimeZones.ZoneLocalMappingResolver,NodaTime.IDateTimeZoneProvider,NodaTime.ZonedDateTime)">
      <summary>
            Creates a pattern for the given pattern text, culture, resolver, time zone provider, and template value.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="cultureInfo">The culture to use in the pattern</param>
      <param name="resolver">Resolver to apply when mapping local date/time values into the zone.</param>
      <param name="zoneProvider">Time zone provider, used when parsing text which contains a time zone identifier.</param>
      <param name="templateValue">Template value to use for unspecified fields</param>
      <returns>A pattern for parsing and formatting zoned date/times.</returns>
      <exception cref="T:NodaTime.Text.InvalidPatternException">The pattern text was invalid.</exception>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.CreateWithCurrentCulture(System.String,NodaTime.IDateTimeZoneProvider)">
      <summary>
            Creates a pattern for the given pattern text and time zone provider, using a strict resolver, the current
            culture, and a default template value of midnight January 1st 2000 UTC.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="zoneProvider">Time zone provider, used when parsing text which contains a time zone identifier.</param>
      <returns>A pattern for parsing and formatting zoned date/times.</returns>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.CreateWithInvariantCulture(System.String,NodaTime.IDateTimeZoneProvider)">
      <summary>
            Creates a pattern for the given pattern text and time zone provider, using a strict resolver, the invariant
            culture, and a default template value of midnight January 1st 2000 UTC.
            </summary>
      <param name="patternText">Pattern text to create the pattern for</param>
      <param name="zoneProvider">Time zone provider, used when parsing text which contains a time zone identifier.</param>
      <returns>A pattern for parsing and formatting zoned date/times.</returns>
    </member>
    <member name="P:NodaTime.Text.ZonedDateTimePattern.ExtendedFormatOnlyIsoPattern">
      <summary>
            Returns an invariant zoned date/time pattern based on ISO-8601 (down to the tick) including offset from UTC and zone ID.
            It corresponds to a custom pattern of "yyyy'-'MM'-'dd'T'HH':'mm':'ss;FFFFFFF z '('o&lt;g&gt;')'" and is available
            as the 'F' standard pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.Format(NodaTime.ZonedDateTime)">
      <summary>
            Formats the given zoned date/time as text according to the rules of this pattern.
            </summary>
      <param name="value">The zoned date/time to format.</param>
      <returns>The zoned date/time formatted according to this pattern.</returns>
    </member>
    <member name="P:NodaTime.Text.ZonedDateTimePattern.GeneralFormatOnlyIsoPattern">
      <summary>
            Returns an zoned local date/time pattern based on ISO-8601 (down to the second) including offset from UTC and zone ID.
            It corresponds to a custom pattern of "yyyy'-'MM'-'dd'T'HH':'mm':'ss z '('o&lt;g&gt;')'" and is available
            as the 'G' standard pattern.
            </summary>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.Parse(System.String)">
      <summary>
            Parses the given text value according to the rules of this pattern.
            </summary>
      <param name="text">The text value to parse.</param>
      <returns>The result of parsing, which may be successful or unsuccessful.</returns>
    </member>
    <member name="P:NodaTime.Text.ZonedDateTimePattern.PatternText">
      <summary>
            Returns the pattern text for this pattern, as supplied on creation.
            </summary>
    </member>
    <member name="P:NodaTime.Text.ZonedDateTimePattern.Resolver">
      <summary>
            Returns the resolver which is used to map local date/times to zoned date/times,
            handling skipped and ambiguous times appropriately (where the offset isn't specified in the pattern).
            </summary>
    </member>
    <member name="P:NodaTime.Text.ZonedDateTimePattern.TemplateValue">
      <summary>
            Returns the value used as a template for parsing: any field values unspecified
            in the pattern are taken from the template.
            </summary>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.WithCulture(System.Globalization.CultureInfo)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            culture.
            </summary>
      <param name="cultureInfo">The culture to use in the new pattern.</param>
      <returns>A new pattern with the given culture.</returns>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.WithPatternText(System.String)">
      <summary>
            Creates a pattern for the same original localization information as this pattern, but with the specified
            pattern text.
            </summary>
      <param name="newPatternText">The pattern text to use in the new pattern.</param>
      <returns>A new pattern with the given pattern text.</returns>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.WithResolver(NodaTime.TimeZones.ZoneLocalMappingResolver)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            resolver.
            </summary>
      <param name="newResolver">The new local mapping resolver to use.</param>
      <returns>A new pattern with the given resolver.</returns>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.WithTemplateValue(NodaTime.ZonedDateTime)">
      <summary>
            Creates a pattern like this one, but with the specified template value.
            </summary>
      <param name="newTemplateValue">The template value for the new pattern, used to fill in unspecified fields.</param>
      <returns>A new pattern with the given template value.</returns>
    </member>
    <member name="M:NodaTime.Text.ZonedDateTimePattern.WithZoneProvider(NodaTime.IDateTimeZoneProvider)">
      <summary>
            Creates a pattern for the same original pattern text as this pattern, but with the specified
            time zone provider.
            </summary>
      <param name="newZoneProvider">The new time zone provider to use.</param>
      <returns>A new pattern with the given time zone provider.</returns>
    </member>
    <member name="P:NodaTime.Text.ZonedDateTimePattern.ZoneProvider">
      <summary>
            Returns the provider which is used to look up time zones when parsing a pattern
            which contains a time zone identifier. This may be null, in which case the pattern can
            only be used for formatting (not parsing).
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.AmbiguousTimeResolver">
      <summary>
            Chooses between two <see cref="T:NodaTime.ZonedDateTime" /> values that resolve to the same <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
      <param name="earlier">The earlier of the ambiguous matches for the original local date and time</param>
      <param name="later">The later of the ambiguous matches for the original local date and time</param>
      <returns>
            A <see cref="T:NodaTime.ZonedDateTime" /> in the target time zone; typically, one of the two input parameters.
            </returns>
      <exception cref="T:NodaTime.AmbiguousTimeException">The implementation rejects requests to map ambiguous times.</exception>
    </member>
    <member name="T:NodaTime.TimeZones.BclDateTimeZone">
      <summary>
            Representation of a time zone converted from a <see cref="T:System.TimeZoneInfo" /> from the Base Class Library.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.BclDateTimeZone.DisplayName">
      <summary>
            Gets the display name associated with the time zone, as provided by the Base Class Library.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)">
      <summary>
            Implements equality in derived classes.
            </summary>
      <param name="zone">The zone to compare with this one. This is guaranteed (when called by <see cref="M:NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)" />) to
            be a non-null reference of the same type as this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:NodaTime.DateTimeZone" /> is equal to this instance;
            otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZone.ForSystemDefault">
      <summary>
            Returns a time zone converted from the BCL representation of the system local time zone.
            </summary>
      <returns>A <see cref="T:NodaTime.TimeZones.BclDateTimeZone" /> wrapping the "local" (system) time zone as returned by
            <see cref="P:System.TimeZoneInfo.Local" />.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZone.FromTimeZoneInfo(System.TimeZoneInfo)">
      <summary>
            Creates a new <see cref="T:NodaTime.TimeZones.BclDateTimeZone" /> from a <see cref="T:System.TimeZoneInfo" /> from the Base Class Library.
            </summary>
      <param name="bclZone">The original time zone to take information from.</param>
      <returns>A <see cref="T:NodaTime.TimeZones.BclDateTimeZone" /> wrapping the given <c>TimeZoneInfo</c>.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bclZone" /> is null.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZone.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table. 
            </returns>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZone.GetZoneInterval(NodaTime.Instant)">
      <summary>
            Gets the zone interval for the given instant; the range of time around the instant in which the same Offset
            applies (with the same split between standard time and daylight saving time, and with the same offset).
            </summary>
      <param name="instant">The <see cref="T:NodaTime.Instant" /> to query.</param>
      <returns>The defined <see cref="T:NodaTime.TimeZones.ZoneInterval" />.</returns>
    </member>
    <member name="P:NodaTime.TimeZones.BclDateTimeZone.OriginalZone">
      <summary>
            Gets the original <see cref="T:System.TimeZoneInfo" /> from which this was created.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.BclDateTimeZoneSource">
      <summary>
            Provides an implementation of <see cref="T:NodaTime.TimeZones.IDateTimeZoneSource" /> that loads data from the BCL
            <see cref="T:System.TimeZoneInfo" /> class.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZoneSource.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>NodaTime.TimeZones.BclDateTimeZoneSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZoneSource.ForId(System.String)">
      <summary>
            Creates a new instance of <see cref="T:NodaTime.TimeZones.BclDateTimeZone" /> from the <see cref="T:System.TimeZoneInfo" /> with the given
            ID. The ID must be a known system time zone ID.
            </summary>
      <param name="id">The ID of the system time zone to convert</param>
      <returns>The Noda Time representation of the given BCL time zone</returns>
      <exception cref="T:System.ArgumentException">The given zone doesn't exist.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZoneSource.GetIds">
      <summary>
            Returns the IDs of all system time zones.
            </summary>
      <returns>The IDs available from this source.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.BclDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Maps the BCL ID to "our" ID as an identity projection.
            </summary>
      <param name="timeZone">The BCL time zone, which must be a known system time zone.</param>
      <returns>
            The ID for the given BCL time zone for this source; that is, the value of the <c>Id</c> property of the
            passed-in <see cref="T:System.TimeZoneInfo" />.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.BclDateTimeZoneSource.VersionId">
      <summary>
            Returns an appropriate version ID for diagnostic purposes, which must not be null.
            This doesn't have any specific format; it's solely for diagnostic purposes.
            The included sources return strings of the format "source identifier: source version" indicating where the
            information comes from and which version of the source information has been loaded.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.DateTimeZoneCache">
      <summary>
            Provides an implementation of <see cref="T:NodaTime.IDateTimeZoneProvider" /> that caches results from an
            <see cref="T:NodaTime.TimeZones.IDateTimeZoneSource" />.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.DateTimeZoneCache.#ctor(NodaTime.TimeZones.IDateTimeZoneSource)">
      <summary>
            Creates a provider backed by the given <see cref="T:NodaTime.TimeZones.IDateTimeZoneSource" />.
            </summary>
      <param name="source">The <see cref="T:NodaTime.TimeZones.IDateTimeZoneSource" /> for this provider.</param>
      <exception cref="T:NodaTime.TimeZones.InvalidDateTimeZoneSourceException">
        <paramref name="source" /> violates its contract.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.DateTimeZoneCache.GetSystemDefault">
      <summary>
            Gets the time zone from this provider that matches the system default time zone, if a matching time zone is
            available.
            </summary>
      <returns>
            The provider-specific representation of the system default time zone.
            </returns>
      <exception cref="T:NodaTime.TimeZones.DateTimeZoneNotFoundException">The system default time zone is not mapped by
            this provider.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.DateTimeZoneCache.GetZoneOrNull(System.String)">
      <summary>
            Returns the time zone for the given ID, if it's available.
            </summary>
      <param name="id">The time zone ID to find.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID or null if the provider does not support
            the given ID.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.DateTimeZoneCache.Ids">
      <summary>
            Gets the list of valid time zone ids advertised by this provider.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.DateTimeZoneCache.Item(System.String)">
      <summary>
            Returns the time zone for the given ID.
            </summary>
      <param name="id">The time zone id to find.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID.</returns>
      <exception cref="T:NodaTime.TimeZones.DateTimeZoneNotFoundException">This provider does not support the given ID.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.DateTimeZoneCache.VersionId">
      <summary>
            The version ID of this provider. This is simply the <see cref="P:NodaTime.TimeZones.IDateTimeZoneSource.VersionId" /> returned by
            the underlying source.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.DateTimeZoneNotFoundException">
      <summary>
            Exception thrown when time zone is requested from an <see cref="T:NodaTime.IDateTimeZoneProvider" />,
            but the specified ID is invalid for that provider.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.DateTimeZoneNotFoundException.#ctor(System.String)">
      <summary>
            Creates an instance with the given message.
            </summary>
      <param name="message">The message for the exception.</param>
    </member>
    <member name="T:NodaTime.TimeZones.IDateTimeZoneSource">
      <summary>
            Provides the interface for objects that can retrieve time zone definitions given an ID.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)">
      <summary>
            Returns the time zone definition associated with the given ID.
            </summary>
      <param name="id">The ID of the time zone to return. This must be one of the IDs
            returned by <see cref="M:NodaTime.TimeZones.IDateTimeZoneSource.GetIds" />.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> is not supported by this source.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.IDateTimeZoneSource.GetIds">
      <summary>
            Returns an unordered enumeration of the IDs available from this source.
            </summary>
      <returns>The IDs available from this source.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Returns this source's corresponding ID for the given BCL time zone.
            </summary>
      <param name="timeZone">The BCL time zone, which must be a known system time zone.</param>
      <returns>
            The ID for the given system time zone for this source, or null if the system time
            zone has no mapping in this source.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.IDateTimeZoneSource.VersionId">
      <summary>
            Returns an appropriate version ID for diagnostic purposes, which must not be null.
            This doesn't have any specific format; it's solely for diagnostic purposes.
            The included sources return strings of the format "source identifier: source version" indicating where the
            information comes from and which version of the source information has been loaded.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.InvalidDateTimeZoneSourceException">
      <summary>
            Exception thrown to indicate that a time zone source has violated the contract of <see cref="T:NodaTime.TimeZones.IDateTimeZoneSource" />.
            This exception is primarily intended to be thrown from <see cref="T:NodaTime.TimeZones.DateTimeZoneCache" />, and only in the face of a buggy
            source; user code should not usually need to be aware of this or catch it.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.InvalidDateTimeZoneSourceException.#ctor(System.String)">
      <summary>
            Creates a new instance with the given message.
            </summary>
      <param name="message">The message for the exception.</param>
    </member>
    <member name="T:NodaTime.TimeZones.Resolvers">
      <summary>
            Commonly-used implementations of the delegates used in resolving a <see cref="T:NodaTime.LocalDateTime" /> to a
            <see cref="T:NodaTime.ZonedDateTime" />, and a method to combine two "partial" resolvers into a full one.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)">
      <summary>
            Combines an <see cref="T:NodaTime.TimeZones.AmbiguousTimeResolver" /> and a <see cref="T:NodaTime.TimeZones.SkippedTimeResolver" /> to create a
            <see cref="T:NodaTime.TimeZones.ZoneLocalMappingResolver" />.
            </summary>
      <param name="ambiguousTimeResolver">Resolver to use for ambiguous mappings.</param>
      <param name="skippedTimeResolver">Resolver to use for "skipped" mappings.</param>
      <returns>The logical combination of the two resolvers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ambiguousTimeResolver" /> or <paramref name="skippedTimeResolver" /> is null.</exception>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.LenientResolver">
      <summary>
            A <see cref="T:NodaTime.TimeZones.ZoneLocalMappingResolver" /> which never throws an exception due to ambiguity or skipped time.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.ReturnEarlier">
      <summary>
            An <see cref="T:NodaTime.TimeZones.AmbiguousTimeResolver" /> which returns the earlier of the two matching times.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore">
      <summary>
            A <see cref="T:NodaTime.TimeZones.SkippedTimeResolver" /> which returns the final tick of the time zone interval
            before the "gap".
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.ReturnLater">
      <summary>
            An <see cref="T:NodaTime.TimeZones.AmbiguousTimeResolver" /> which returns the later of the two matching times.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter">
      <summary>
            A <see cref="T:NodaTime.TimeZones.SkippedTimeResolver" /> which returns the first tick of the time zone interval
            after the "gap".
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.StrictResolver">
      <summary>
            A <see cref="T:NodaTime.TimeZones.ZoneLocalMappingResolver" /> which only ever succeeds in the (usual) case where the result
            of the mapping is unambiguous.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous">
      <summary>
            An <see cref="T:NodaTime.TimeZones.AmbiguousTimeResolver" /> which simply throws an <see cref="T:NodaTime.AmbiguousTimeException" />.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped">
      <summary>
            A <see cref="T:NodaTime.TimeZones.SkippedTimeResolver" /> which simply throws a <see cref="T:NodaTime.SkippedTimeException" />.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.SkippedTimeResolver">
      <summary>
            Resolves a <see cref="T:NodaTime.LocalDateTime" /> to a <see cref="T:NodaTime.ZonedDateTime" /> in the situation
            where the requested local time does not exist in the target time zone.
            </summary>
      <param name="localDateTime">The local date and time to map to the given time zone</param>
      <param name="zone">The target time zone</param>
      <param name="intervalBefore">The zone interval directly before the target local date and time would have occurred</param>
      <param name="intervalAfter">The zone interval directly after the target local date and time would have occurred</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> in the target time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The implementation rejects requests to map skipped times.</exception>
    </member>
    <member name="T:NodaTime.TimeZones.TzdbDateTimeZoneSource">
      <summary>
            Provides an implementation of <see cref="T:NodaTime.TimeZones.IDateTimeZoneSource" /> that loads data originating from the
            <a href="http://www.iana.org/time-zones">tz database</a> (also known as the IANA Time Zone database, or zoneinfo
            or Olson database).
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceManager)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbDateTimeZoneSource" /> class.
            </summary>
      <param name="manager">The <see cref="T:System.Resources.ResourceManager" /> to search for the time zone resources.</param>
      <exception cref="T:NodaTime.Utility.InvalidNodaDataException">The data within the resource manager is invalid.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.Resources.ResourceSet)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbDateTimeZoneSource" /> class.
            </summary>
      <param name="source">The <see cref="T:System.Resources.ResourceSet" /> to search for the time zone resources.</param>
      <exception cref="T:NodaTime.Utility.InvalidNodaDataException">The data within the resource set is invalid.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbDateTimeZoneSource" /> class from a resource within
            the NodaTime assembly.
            </summary>
      <param name="baseName">The root name of the resource file.</param>
      <exception cref="T:NodaTime.Utility.InvalidNodaDataException">The data within the resource is invalid.</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">The resource set cannot be found.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.#ctor(System.String,System.Reflection.Assembly)">
      <summary>
            Initializes a new instance of the <see cref="T:NodaTime.TimeZones.TzdbDateTimeZoneSource" /> class.
            </summary>
      <param name="baseName">The root name of the resource file.</param>
      <param name="assembly">The assembly to search for the time zone resources.</param>
      <exception cref="T:NodaTime.Utility.InvalidNodaDataException">The data within the resource is invalid.</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">The resource set cannot be found.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.Aliases">
      <summary>
            Returns a lookup from canonical time zone ID (e.g. "Europe/London") to a group of aliases for that time zone
            (e.g. {"Europe/Belfast", "Europe/Guernsey", "Europe/Jersey", "Europe/Isle_of_Man", "GB", "GB-Eire"}).
            </summary>
      <returns>A lookup from canonical ID to the aliases of that ID.</returns>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.CanonicalIdMap">
      <summary>
            Returns a read-only map from time zone ID to the canonical ID. For example, the key "Europe/Jersey"
            would be associated with the value "Europe/London".
            </summary>
      <returns>A map from time zone ID to the canonical ID.</returns>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.Default">
      <summary>
            The <see cref="T:NodaTime.TimeZones.TzdbDateTimeZoneSource" /> initialised from resources within the NodaTime assembly.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.ForId(System.String)">
      <summary>
            Returns the time zone definition associated with the given ID.
            </summary>
      <param name="id">The ID of the time zone to return. This must be one of the IDs
            returned by <see cref="M:NodaTime.TimeZones.IDateTimeZoneSource.GetIds" />.</param>
      <returns>The <see cref="T:NodaTime.DateTimeZone" /> for the given ID.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> is not supported by this source.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.FromStream(System.IO.Stream)">
      <summary>
            Creates an instance from a stream in the custom Noda Time format. The stream must be readable.
            </summary>
      <param name="stream">The stream containing time zone data</param>
      <returns>A <c>TzdbDateTimeZoneSource</c> providing information from the given stream.</returns>
      <exception cref="T:NodaTime.Utility.InvalidNodaDataException">The stream contains invalid time zone data, or data which cannot
            be read by this version of Noda Time.</exception>
      <exception cref="T:System.IO.IOException">Reading from the stream failed.</exception>
      <exception cref="T:System.InvalidOperationException">The supplied stream doesn't support reading.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.GetIds">
      <summary>
            Returns an unordered enumeration of the IDs available from this source.
            </summary>
      <returns>The IDs available from this source.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)">
      <summary>
            Returns this source's corresponding ID for the given BCL time zone.
            </summary>
      <param name="zone">The BCL time zone, which must be a known system time zone.</param>
      <param name="timeZone">The BCL time zone, which must be a known system time zone.</param>
      <returns>
            The ID for the given system time zone for this source, or null if the system time
            zone has no mapping in this source.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.TzdbVersion">
      <summary>
            Returns just the TZDB version (e.g. "2013a") of the source data.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbDateTimeZoneSource.Validate">
      <summary>
            Validates that the data within this source is consistent with itself.
            </summary>
      <exception cref="T:NodaTime.Utility.InvalidNodaDataException">The source data is invalid. The source may not function
            correctly.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.VersionId">
      <summary>
            Returns an appropriate version ID for diagnostic purposes, which must not be null.
            This doesn't have any specific format; it's solely for diagnostic purposes.
            The included sources return strings of the format "source identifier: source version" indicating where the
            information comes from and which version of the source information has been loaded.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.WindowsMapping">
      <summary>
            Gets the Windows time zone mapping information provided in the CLDR
            supplemental "windowsZones.xml" file.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbDateTimeZoneSource.ZoneLocations">
      <summary>
            Returns a read-only list of zone locations known to this source.
            </summary>
      <exception cref="T:System.InvalidOperationException">This is a legacy resource-based data source which does
            not include location information.</exception>
    </member>
    <member name="T:NodaTime.TimeZones.TzdbZoneLocation">
      <summary>
            A location entry generated from the "zone.tab" file in a TZDB release. This can be used to provide
            users with a choice of time zone, although it is not internationalized.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
      <summary>
            Creates a new location.
            </summary>
      <param name="latitudeSeconds">Latitude of the location, in seconds.</param>
      <param name="longitudeSeconds">Longitude of the location, in seconds.</param>
      <param name="countryName">English country name of the location, in degrees. Must not be null.</param>
      <param name="countryCode">ISO-3166 country code of the location. Must not be null.</param>
      <param name="zoneId">Time zone identifier of the location. Must not be null.</param>
      <param name="comment">Optional comment. Must not be null, but may be empty.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The latitude or longitude is invalid.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbZoneLocation.Comment">
      <summary>
            The comment (in English) for the mapping, if any.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbZoneLocation.CountryCode">
      <summary>
            The ISO-3166 2-letter country code for the country containing the location.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbZoneLocation.CountryName">
      <summary>
            The English name of the country containing the location.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbZoneLocation.Latitude">
      <summary>
            Latitude in degrees; positive for North, negative for South.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbZoneLocation.Longitude">
      <summary>
            Longitude in degrees; positive for East, negative for West.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.TzdbZoneLocation.ZoneId">
      <summary>
            The ID of the time zone for this location.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneEqualityComparer">
      <summary>
            Equality comparer for time zones, comparing specific aspects of the zone intervals within
            a time zone for a specific interval of the time line.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneEqualityComparer.Equals(NodaTime.DateTimeZone,NodaTime.DateTimeZone)">
      <summary>
            Compares two time zones for equality according to the options and interval provided to this comparer.
            </summary>
      <param name="x">The first <see cref="T:NodaTime.DateTimeZone" /> to compare.</param>
      <param name="y">The second <see cref="T:NodaTime.DateTimeZone" /> to compare.</param>
      <returns>
        <c>true</c> if the specified time zones are equal under the options and interval of this comparer; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneEqualityComparer.ForInterval(NodaTime.Interval)">
      <summary>
            Returns a <see cref="T:NodaTime.TimeZones.ZoneEqualityComparer" /> for the given interval with the default options.
            </summary>
      <param name="interval">The interval over which to compare time zones.</param>
      <returns>A ZoneEqualityComparer for the given interval with the default options.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneEqualityComparer.GetHashCode(NodaTime.DateTimeZone)">
      <summary>
            Returns a hash code for the specified time zone.
            </summary>
      <param name="obj">The time zone to compute a hash code for.</param>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneEqualityComparer.WithOptions(NodaTime.TimeZones.ZoneEqualityComparer.Options)">
      <summary>
            Returns a comparer operating over the same interval as this one, but with the given
            set of options.
            </summary>
      <param name="options">New set of options, which must consist of flags defined within the <see cref="T:NodaTime.TimeZones.ZoneEqualityComparer.Options" /> enum.</param>
      <returns>A comparer operating over the same interval as this one, but with the given set of options.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified options are invalid.</exception>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneEqualityComparer.Options">
      <summary>
            Options to use when comparing time zones for equality. Each option makes the comparison more restrictive.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneEqualityComparer.Options.OnlyMatchWallOffset">
      <summary>
            The default comparison, which only cares about the wall offset at any particular
            instant, within the interval of the comparer. In other words, if <see cref="M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)" />
            returns the same value for all instants in the interval, the comparer will consider the zones to be equal.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchOffsetComponents">
      <summary>
            Instead of only comparing wall offsets, the standard/savings split is also considered. So when this
            option is used, two zones which both have a wall offset of +2 at one instant would be considered
            unequal if one of those offsets was +1 standard, +1 savings and the other was +2 standard with no daylight
            saving.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchNames">
      <summary>
            Compare the names of zone intervals as well as offsets.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchAllTransitions">
      <summary>
            This option prevents adjacent zone intervals from being coalesced, even if they are otherwise considered
            equivalent according to other options.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneEqualityComparer.Options.MatchStartAndEndTransitions">
      <summary>
            Includes the transitions into the first zone interval and out of the
            last zone interval as part of the comparison, even if they do not affect
            the offset or name for any instant within the operating interval.
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.ZoneEqualityComparer.Options.StrictestMatch">
      <summary>
            The combination of all available match options.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneInterval">
      <summary>
            Represents a range of time for which a particular Offset applies.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.#ctor(System.String,NodaTime.Instant,NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)">
      <summary>
              Initializes a new instance of the <see cref="T:NodaTime.TimeZones.ZoneInterval" /> class.
            </summary>
      <param name="name">The name of this offset period (e.g. PST or PDT).</param>
      <param name="start">The first <see cref="T:NodaTime.Instant" /> that the <paramref name="wallOffset" /> applies.</param>
      <param name="end">The last <see cref="T:NodaTime.Instant" /> (exclusive) that the <paramref name="wallOffset" /> applies.</param>
      <param name="wallOffset">The <see cref="P:NodaTime.TimeZones.ZoneInterval.WallOffset" /> from UTC for this period including any daylight savings.</param>
      <param name="savings">The <see cref="P:NodaTime.TimeZones.ZoneInterval.WallOffset" /> daylight savings contribution to the offset.</param>
      <exception cref="T:System.ArgumentException">If <c><paramref name="start" /> &gt;= <paramref name="end" /></c>.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)">
      <summary>
              Determines whether this period contains the given Instant in its range.
            </summary>
      <param name="instant">The instant to test.</param>
      <returns>
        <c>true</c> if this period contains the given Instant in its range; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Duration">
      <summary>
              Gets the duration of this period.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.End">
      <summary>
              Gets the last Instant (exclusive) that the Offset applies.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)">
      <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.
            </param>
      <returns>
              true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.Equals(System.Object)">
      <summary>
              Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.GetHashCode">
      <summary>
              Serves as a hash function for a particular type.
            </summary>
      <returns>
              A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.IsoLocalEnd">
      <summary>
            Returns the local start time of the interval, as LocalDateTime
            in the ISO calendar. This does not include any daylight saving 
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.IsoLocalStart">
      <summary>
            Returns the local start time of the interval, as LocalDateTime
            in the ISO calendar.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Name">
      <summary>
              Gets the name of this offset period (e.g. PST or PDT).
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Savings">
      <summary>
              Gets the daylight savings value for this period.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.StandardOffset">
      <summary>
              Gets the standard offset for this period. This is the offset without any daylight savings
              contributions.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.Start">
      <summary>
              Gets the first Instant that the Offset applies.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneInterval.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneInterval.WallOffset">
      <summary>
              Gets the offset from UTC for this period. This includes any daylight savings value.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneLocalMapping">
      <summary>
            The result of mapping a <see cref="T:NodaTime.LocalDateTime" /> within a time zone, i.e. finding out
            at what "global" time the "local" time occurred.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.Count">
      <summary>
            Returns the number of results within this mapping: the number of distinct
            <see cref="T:NodaTime.ZonedDateTime" /> values which map to the original <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval">
      <summary>
            Returns the earlier <see cref="T:NodaTime.TimeZones.ZoneInterval" /> within this mapping. For unambiguous
            mappings, this is the same as <see cref="P:NodaTime.TimeZones.ZoneLocalMapping.LateInterval" />; for ambiguous mappings,
            this is the interval during which the mapped local time first occurs; for impossible
            mappings, this is the interval before which the mapped local time occurs.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneLocalMapping.First">
      <summary>
            Returns a <see cref="T:NodaTime.ZonedDateTime" /> which maps to the original <see cref="T:NodaTime.LocalDateTime" />
            in the mapped <see cref="T:NodaTime.DateTimeZone" />: either the single result if the mapping is unambiguous,
            or the earlier result if the local date/time occurs twice in the time zone due to a time zone
            offset change such as an autumnal daylight saving transition.
            </summary>
      <returns>The unambiguous result of mapping a local date/time in a time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The local date/time was skipped in the time zone.</exception>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneLocalMapping.Last">
      <summary>
            Returns a <see cref="T:NodaTime.ZonedDateTime" /> which maps to the original <see cref="T:NodaTime.LocalDateTime" />
            in the mapped <see cref="T:NodaTime.DateTimeZone" />: either the single result if the mapping is unambiguous,
            or the later result if the local date/time occurs twice in the time zone due to a time zone
            offset change such as an autumnal daylight saving transition.
            </summary>
      <returns>The unambiguous result of mapping a local date/time in a time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The local date/time was skipped in the time zone.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.LateInterval">
      <summary>
            Returns the later <see cref="T:NodaTime.TimeZones.ZoneInterval" /> within this mapping. For unambiguous
            mappings, this is the same as <see cref="P:NodaTime.TimeZones.ZoneLocalMapping.EarlyInterval" />; for ambiguous mappings,
            this is the interval during which the mapped local time last occurs; for impossible
            mappings, this is the interval after which the mapped local time occurs.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.LocalDateTime">
      <summary>
            Returns the <see cref="T:NodaTime.LocalDateTime" /> which was mapped with in the time zone.
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.ZoneLocalMapping.Single">
      <summary>
            Returns the single <see cref="T:NodaTime.ZonedDateTime" /> which maps to the original
            <see cref="T:NodaTime.LocalDateTime" /> in the mapped <see cref="T:NodaTime.DateTimeZone" />.
            </summary>
      <returns>The unambiguous result of mapping the local date/time in the time zone.</returns>
      <exception cref="T:NodaTime.SkippedTimeException">The local date/time was skipped in the time zone.</exception>
      <exception cref="T:NodaTime.AmbiguousTimeException">The local date/time was ambiguous in the time zone.</exception>
    </member>
    <member name="P:NodaTime.TimeZones.ZoneLocalMapping.Zone">
      <summary>
            Returns the <see cref="T:NodaTime.DateTimeZone" /> in which this mapping was performed.
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.ZoneLocalMappingResolver">
      <summary>
            Resolves the result of attempting to map a local date and time to a target time zone.
            </summary>
      <param name="mapping">The intermediate result of mapping a local time to a target time zone.</param>
      <returns>A <see cref="T:NodaTime.ZonedDateTime" /> in the target time zone.</returns>
      <exception cref="T:NodaTime.AmbiguousTimeException">The implementation rejects requests to map ambiguous times.</exception>
      <exception cref="T:NodaTime.SkippedTimeException">The implementation rejects requests to map skipped times.</exception>
    </member>
    <member name="T:NodaTime.TimeZones.Cldr.MapZone">
      <summary>
            Represents a single <c>&lt;mapZone&gt;</c> element in the CLDR Windows zone mapping file. 
            </summary>
    </member>
    <member name="M:NodaTime.TimeZones.Cldr.MapZone.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String})">
      <summary>
            Creates a new mapping entry.
            </summary>
      <param name="windowsId">Windows system time zone identifier. Must not be null.</param>
      <param name="territory">Territory code. Must not be null.</param>
      <param name="tzdbIds">List of territory codes. Must not be null, and must not
            contains null values.</param>
    </member>
    <member name="F:NodaTime.TimeZones.Cldr.MapZone.FixedOffsetTerritory">
      <summary>
            Identifier used for the "fixed offset" territory. A zone mapping with
            this territory will always have a single entry. The value of this constant is "ZZ".
            </summary>
    </member>
    <member name="F:NodaTime.TimeZones.Cldr.MapZone.PrimaryTerritory">
      <summary>
            Identifier used for the primary territory of each Windows time zone. A zone mapping with
            this territory will always have a single entry. The value of this constant is "001".
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.MapZone.Territory">
      <summary>
            Gets the territory code for this mapping.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.MapZone.TzdbIds">
      <summary>
            Gets a read-only non-empty collection of TZDB zone identifiers for this mapping, such as
            "America/Chicago" and "America/Matamoros" (both of which are TZDB zones associated with the "Central Standard Time"
            Windows system time zone).
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.MapZone.WindowsId">
      <summary>
            Gets the Windows system time zone identifier for this mapping, such as "Central Standard Time".
            </summary>
    </member>
    <member name="T:NodaTime.TimeZones.Cldr.WindowsZones">
      <summary>
            Representation of the <c>&lt;windowsZones&gt;</c> element of CLDR supplemental data.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.WindowsZones.MapZones">
      <summary>
            Gets an immutable collection of mappings from Windows system time zones to
            TZDB time zones.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.WindowsZones.PrimaryMapping">
      <summary>
            Gets an immutable dictionary of primary mappings, from Windows system time zone ID
            to TZDB zone ID. This corresponds to the "001" territory which is present for every zone
            within the mapping file.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.WindowsZones.TzdbVersion">
      <summary>
            Gets the TZDB version this Windows zone mapping data was created from.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.WindowsZones.Version">
      <summary>
            Gets the version of the Windows zones mapping data read from the original file.
            </summary>
    </member>
    <member name="P:NodaTime.TimeZones.Cldr.WindowsZones.WindowsVersion">
      <summary>
            Gets the Windows time zone database version this Windows zone mapping data was created from.
            </summary>
    </member>
    <member name="T:NodaTime.Utility.BclConversions">
      <summary>
            Conversion methods which don't naturally fit into any other types - for example, for
            enums which can't specify any other code. In most cases, conversions to and from BCL types
            are provided within the type itself - such as <see cref="M:NodaTime.LocalDateTime.ToDateTimeUnspecified" />
            and <see cref="M:NodaTime.LocalDateTime.FromDateTime(System.DateTime)" />.
            </summary>
    </member>
    <member name="M:NodaTime.Utility.BclConversions.ToDayOfWeek(NodaTime.IsoDayOfWeek)">
      <summary>
            Converts from the Noda Time <see cref="T:NodaTime.IsoDayOfWeek" /> enum to the equivalent BCL
            <see cref="T:System.DayOfWeek" /> value. Other than Sunday, the BCL and ISO values are the same -
            but ISO 8601 defines Sunday as day 7, and the BCL defines it as day 0.
            </summary>
      <param name="isoDayOfWeek">ISO day of week value to convert.</param>
      <returns>The ISO day of week value equivalent to the one passed in.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="isoDayOfWeek" /> parameter
            is not a valid day of the week.</exception>
    </member>
    <member name="M:NodaTime.Utility.BclConversions.ToIsoDayOfWeek(System.DayOfWeek)">
      <summary>
            Converts from the BCL <see cref="T:System.DayOfWeek" /> enum to the equivalent Noda Time <see cref="T:NodaTime.IsoDayOfWeek" /> value.
            Other than Sunday, the BCL and ISO values are the same - but ISO 8601 defines
            Sunday as day 7, and the BCL defines it as day 0.
            </summary>
      <param name="dayOfWeek">ISO day of week value to convert.</param>
      <returns>The BCL day of week value equivalent to the one passed in.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dayOfWeek" /> parameter
            is not a valid day of the week.</exception>
    </member>
    <member name="T:NodaTime.Utility.InvalidNodaDataException">
      <summary>
            Exception thrown when data read by Noda Time (such as serialized time zone data) is invalid. This includes
            data which is truncated, i.e. we expect more data than we can read.
            </summary>
    </member>
    <member name="M:NodaTime.Utility.InvalidNodaDataException.#ctor(System.String)">
      <summary>
            Creates an instance with the given message.
            </summary>
      <param name="message">The message for the exception.</param>
    </member>
    <member name="M:NodaTime.Utility.InvalidNodaDataException.#ctor(System.String,System.Exception)">
      <summary>
            Creates an instance with the given message.
            </summary>
      <param name="message">The message for the exception.</param>
      <param name="innerException">Underlying cause of the error.</param>
    </member>
  </members>
</doc>